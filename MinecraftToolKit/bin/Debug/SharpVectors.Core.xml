<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpVectors.Core</name>
    </assembly>
    <members>
        <member name="T:SharpVectors.Dom.CssConstants">
            <summary>
            This interface defines constants for CSS.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.BeginElement">
            <summary>
            Creates a begin instance time for the current time. The new instance time is added 
            to the begin instance times list. 
            <para>
            The behavior of this method is equivalent to BeginElementAt(0).
            </para>
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.BeginElementAt(System.Single)">
            <summary>
            Creates a begin instance time for the current time plus the specified offset. 
            The new instance time is added to the begin instance times list.
            </summary>
            <param name="offset">
            The offset from the current document time, in seconds, at which to begin the element.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.EndElement">
            <summary>
            Creates an end instance time for the current time. The new instance time is added 
            to the end instance times list. 
            <para>
            The behavior of this method is equivalent to EndElementAt(0).
            </para>
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.EndElementAt(System.Single)">
            <summary>
            Creates a end instance time for the current time plus the specified offset. 
            The new instance time is added to the end instance times list.
            </summary>
            <param name="offset">
            The offset from the current document time, in seconds, at which to end the element.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.SvgConstants">
            <summary>
            Define SVG constants, such as tag names, attribute names and URI
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MouseEventsType">
            <summary>
            The event type for MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.UIEventsType">
            <summary>
            The event type for UIEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgEventsType">
            <summary>
            The event type for SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeyEventsType">
            <summary>
            The event type for KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeydownEventType">
            <summary>
            The event type for 'keydown' KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeypressEventType">
            <summary>
            The event type for 'keypress' KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeyupEventType">
            <summary>
            The event type for 'keyup' KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.ClickEventType">
            <summary>
            The event type for 'click' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MouseupEventType">
            <summary>
            The event type for 'mouseup' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MousedownEventType">
            <summary>
            The event type for 'mousedown' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MousemoveEventType">
            <summary>
            The event type for 'mousemove' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MouseoutEventType">
            <summary>
            The event type for 'mouseout' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MouseoverEventType">
            <summary>
            The event type for 'mouseover' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.DomfocusinEventType">
            <summary>
            The event type for 'DOMFocusIn' UIEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.DomfocusoutEventType">
            <summary>
            The event type for 'DOMFocusOut' UIEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.DomactivateEventType">
            <summary>
            The event type for 'DOMActivate' UIEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgLoadEventType">
            <summary>
            The event type for 'SVGLoad' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgUnloadEventType">
            <summary>
            The event type for 'SVGUnload' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgAbortEventType">
            <summary>
            The event type for 'SVGAbort' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgErrorEventType">
            <summary>
            The event type for 'SVGError' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgResizeEventType">
            <summary>
            The event type for 'SVGResize' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgScrollEventType">
            <summary>
            The event type for 'SVGScroll' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgZoomEventType">
            <summary>
            The event type for 'SVGZoom' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnKeyupAttribute">
            <summary>
            The 'onkeyup' attribute name of type KeyEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnKeydownAttribute">
            <summary>
            The 'onkeydown' attribute name of type KeyEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnKeypressAttribute">
            <summary>
            The 'onkeypress' attribute name of type KeyEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnAbortAttribute">
            <summary>
            The 'onabort' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnActivateAttribute">
            <summary>
            The 'onabort' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnBeginAttribute">
            <summary>
            The 'onbegin' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnClickAttribute">
            <summary>
            The 'onclick' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnEndAttribute">
            <summary>
            The 'onend' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnErrorAttribute">
            <summary>
            The 'onerror' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnFocusinAttribute">
            <summary>
            The 'onfocusin' attribute name of type UIEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnFocusoutAttribute">
            <summary>
            The 'onfocusout' attribute name of type UIEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnLoadAttribute">
            <summary>
            The 'onload' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMousedownAttribute">
            <summary>
            The 'onmousedown' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMousemoveAttribute">
            <summary>
            The 'onmousemove' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMouseoutAttribute">
            <summary>
            The 'onmouseout' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMouseoverAttribute">
            <summary>
            The 'onmouseover' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMouseupAttribute">
            <summary>
            The 'onmouseup' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnRepeatAttribute">
            <summary>
            The 'onrepeat' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnResizeAttribute">
            <summary>
            The 'onresize' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnScrollAttribute">
            <summary>
            The 'onscroll' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnUnloadAttribute">
            <summary>
            The 'onunload' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnZoomAttribute">
            <summary>
            The 'onzoom' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateColorElement">
            <summary>
            The SVGAnimateColorElement interface corresponds to the "animateColor" element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.AttributeName">
            <summary>
            Gets or sets the name of the target attribute. An XMLNS prefix may be used to indicate the XML 
            namespace for the attribute. The prefix will be interpreted in the scope of the 
            current (i.e., the referencing) animation element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.AttributeType">
            <summary>
            Gets or sets the namespace in which the target attribute and its associated values are defined. 
            </summary>
            <value>
            The attribute value is one of the following (values are case-sensitive): CSS | XML | auto
            <list type="bullet">
            <item><term>CSS</term>
            <description>
            This specifies that the value of "attributeName" is the name of a CSS property 
            defined as animatable in this specification.
            </description>
            </item>
            <item><term>XML</term>
            <description>
            This specifies that the value of "attributeName" is the name of an XML attribute defined 
            in the default XML namespace for the target element.If the value for "attributeName" has 
            an XMLNS prefix, the implementation must use the associated namespace as defined in the 
            scope of the target element.The attribute must be defined as animatable in this specification.
            </description>
            </item>
            <item><term>auto</term>
            <description>
            The implementation should match the "attributeName" to an attribute for the target element.
            The implementation must first search through the list of CSS properties for a matching property name, 
            and if none is found, search the default XML namespace for the element.
            </description>
            </item>
            </list>
            <para>The default value is 'auto'.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.CalcMode">
            <summary>
            Gets or sets a value that specifies the interpolation mode for the animation. 
            </summary>
            <value>
            This can take any of the following values. The default mode is 'linear', however if the attribute 
            does not support linear interpolation (e.g. for strings), the "calcMode" attribute is ignored 
            and discrete interpolation is used.
            <list type="bullet">
            <item><term>discrete</term>
            <description>
            This specifies that the animation function will jump from one value to the next without any interpolation.
            </description>
            </item>
            <item><term>linear</term>
            <description>
            Simple linear interpolation between values is used to calculate the animation function. 
            Except for "animateMotion", this is the default "calcMode".
            </description>
            </item>
            <item><term>paced</term>
            <description>
            Defines interpolation to produce an even pace of change across the animation.
             If 'paced' is specified, any "keyTimes" or "keySplines" will be ignored. 
             For "animateMotion", this is the default "calcMode". 
            </description>
            </item>
            <item><term>spline</term>
            <description>
            Interpolates from one value in the "values" list to the next according to a time function 
            defined by a cubic Bézier spline. The points of the spline are defined in the "keyTimes" attribute, 
            and the control points for each interval are defined in the "keySplines" attribute.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.Values">
            <summary>
            Gets or sets a semicolon-separated list of one or more values. 
            </summary>
            <value>
            Vector-valued attributes are supported using the vector syntax of the "attributeType" domain. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.KeyTimes">
            <summary>
            Gets or sets a semicolon-separated list of time values used to control the pacing of the animation.
            </summary>
            <value>
            Each time in the list corresponds to a value in the "values" attribute list, and defines when the 
            value is used in the animation function. Each time value in the "keyTimes" list is specified as 
            a floating point value between 0 and 1 (inclusive), representing a proportional offset into the 
            simple duration of the animation element.
            </value>
            <remarks>
            <para>
            For animations specified with a "values" list, the "keyTimes" attribute if specified must have 
            exactly as many values as there are in the "values" attribute. For from/to/by animations, 
            the "keyTimes" attribute if specified must have two values.
            </para>
            <para>
            Each successive time value must be greater than or equal to the preceding time value.
            </para>
            <para>
            The "keyTimes" list semantics depends upon the interpolation mode:
            </para>
            <list type="bullet">
            <item>
            <description>
            For linear and spline animation, the first time value in the list must be 0, and the last time 
            value in the list must be 1. The key time associated with each value defines when the value is set; 
            values are interpolated between the key times.
            </description>
            </item>
            <item>
            <description>
            For discrete animation, the first time value in the list must be 0. The time associated with each 
            value defines when the value is set; the animation function uses that value until the next time 
            defined in "keyTimes".
            </description>
            </item>
            </list>
            <para>
            If the interpolation mode is 'paced', the "keyTimes" attribute is ignored.
            </para>
            <para>
            If there are any errors in the "keyTimes" specification (bad values, too many or too few values), 
            the document fragment is in error (see error processing).
            </para>
            <para>
            If the simple duration is indefinite, any "keyTimes" specification will be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.KeySplines">
            <summary>
            Gets or sets a set of Bézier control points associated with the "keyTimes" list, defining a cubic 
            Bézier function that controls interval pacing.
            </summary>
            <value>
            <para>
            The attribute value is a semicolon-separated list of control point descriptions. Each control 
            point description is a set of four values: x1 y1 x2 y2, describing the Bézier control points 
            for one time segment.
            </para>
            <para>
            The values must all be in the range 0 to 1.
            </para>
            <para>
            This attribute is ignored unless the "calcMode" is set to 'spline'.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.From">
            <summary>
            Gets or sets a value that specifies the starting value of the animation.
            </summary>
            <value>
            Specifies the starting value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the ending value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.By">
            <summary>
            Gets or sets a value that specifies a relative offset value for the animation.
            </summary>
            <value>
            Specifies a relative offset value for the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.Additive">
            <summary>
            Gets or sets a value that controls whether or not the animation is additive.
            </summary>
            <value>
            Posible values are replace | sum, default is sum.
            <list type="bullet">
            <item><term>replace</term>
            <description>
            Specifies that the animation will override the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            <item><term>sum</term>
            <description>
            Specifies that the animation will add to the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.Accumulate">
            <summary>
            Gets or sets a value that controls whether or not the animation is cumulative.
            </summary>
            <value>
            Possible value are none | sum, default is none.
            <list type="bullet">
            <item><term>sum</term>
            <description>
            Specifies that each repeat iteration after the first builds upon the last value of 
            the previous iteration.
            </description>
            </item>
            <item><term>none</term>
            <description>
            Specifies that repeat iterations are not cumulative. This is the default.
            </description>
            </item>
            </list>
            </value>
            <remarks>
            <para>
            This attribute is ignored if the target attribute value does not support addition, 
            or if the animation element does not repeat.
            </para>
            <para>Cumulative animation is not defined for "to animation".</para>
            <para>This attribute will be ignored if the animation function is specified with only the "to" attribute.</para>
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateElement">
            <summary>
            This interface corresponds to the "animate" element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.AttributeName">
            <summary>
            Gets or sets the name of the target attribute. An XMLNS prefix may be used to indicate the XML 
            namespace for the attribute. The prefix will be interpreted in the scope of the 
            current (i.e., the referencing) animation element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.AttributeType">
            <summary>
            Gets or sets the namespace in which the target attribute and its associated values are defined. 
            </summary>
            <value>
            The attribute value is one of the following (values are case-sensitive): CSS | XML | auto
            <list type="bullet">
            <item><term>CSS</term>
            <description>
            This specifies that the value of "attributeName" is the name of a CSS property 
            defined as animatable in this specification.
            </description>
            </item>
            <item><term>XML</term>
            <description>
            This specifies that the value of "attributeName" is the name of an XML attribute defined 
            in the default XML namespace for the target element.If the value for "attributeName" has 
            an XMLNS prefix, the implementation must use the associated namespace as defined in the 
            scope of the target element.The attribute must be defined as animatable in this specification.
            </description>
            </item>
            <item><term>auto</term>
            <description>
            The implementation should match the "attributeName" to an attribute for the target element.
            The implementation must first search through the list of CSS properties for a matching property name, 
            and if none is found, search the default XML namespace for the element.
            </description>
            </item>
            </list>
            <para>The default value is 'auto'.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.CalcMode">
            <summary>
            Gets or sets a value that specifies the interpolation mode for the animation. 
            </summary>
            <value>
            This can take any of the following values. The default mode is 'linear', however if the attribute 
            does not support linear interpolation (e.g. for strings), the "calcMode" attribute is ignored 
            and discrete interpolation is used.
            <list type="bullet">
            <item><term>discrete</term>
            <description>
            This specifies that the animation function will jump from one value to the next without any interpolation.
            </description>
            </item>
            <item><term>linear</term>
            <description>
            Simple linear interpolation between values is used to calculate the animation function. 
            Except for "animateMotion", this is the default "calcMode".
            </description>
            </item>
            <item><term>paced</term>
            <description>
            Defines interpolation to produce an even pace of change across the animation.
             If 'paced' is specified, any "keyTimes" or "keySplines" will be ignored. 
             For "animateMotion", this is the default "calcMode". 
            </description>
            </item>
            <item><term>spline</term>
            <description>
            Interpolates from one value in the "values" list to the next according to a time function 
            defined by a cubic Bézier spline. The points of the spline are defined in the "keyTimes" attribute, 
            and the control points for each interval are defined in the "keySplines" attribute.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.Values">
            <summary>
            Gets or sets a semicolon-separated list of one or more values. 
            </summary>
            <value>
            Vector-valued attributes are supported using the vector syntax of the "attributeType" domain. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.KeyTimes">
            <summary>
            Gets or sets a semicolon-separated list of time values used to control the pacing of the animation.
            </summary>
            <value>
            Each time in the list corresponds to a value in the "values" attribute list, and defines when the 
            value is used in the animation function. Each time value in the "keyTimes" list is specified as 
            a floating point value between 0 and 1 (inclusive), representing a proportional offset into the 
            simple duration of the animation element.
            </value>
            <remarks>
            <para>
            For animations specified with a "values" list, the "keyTimes" attribute if specified must have 
            exactly as many values as there are in the "values" attribute. For from/to/by animations, 
            the "keyTimes" attribute if specified must have two values.
            </para>
            <para>
            Each successive time value must be greater than or equal to the preceding time value.
            </para>
            <para>
            The "keyTimes" list semantics depends upon the interpolation mode:
            </para>
            <list type="bullet">
            <item>
            <description>
            For linear and spline animation, the first time value in the list must be 0, and the last time 
            value in the list must be 1. The key time associated with each value defines when the value is set; 
            values are interpolated between the key times.
            </description>
            </item>
            <item>
            <description>
            For discrete animation, the first time value in the list must be 0. The time associated with each 
            value defines when the value is set; the animation function uses that value until the next time 
            defined in "keyTimes".
            </description>
            </item>
            </list>
            <para>
            If the interpolation mode is 'paced', the "keyTimes" attribute is ignored.
            </para>
            <para>
            If there are any errors in the "keyTimes" specification (bad values, too many or too few values), 
            the document fragment is in error (see error processing).
            </para>
            <para>
            If the simple duration is indefinite, any "keyTimes" specification will be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.KeySplines">
            <summary>
            Gets or sets a set of Bézier control points associated with the "keyTimes" list, defining a cubic 
            Bézier function that controls interval pacing.
            </summary>
            <value>
            <para>
            The attribute value is a semicolon-separated list of control point descriptions. Each control 
            point description is a set of four values: x1 y1 x2 y2, describing the Bézier control points 
            for one time segment.
            </para>
            <para>
            The values must all be in the range 0 to 1.
            </para>
            <para>
            This attribute is ignored unless the "calcMode" is set to 'spline'.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.From">
            <summary>
            Gets or sets a value that specifies the starting value of the animation.
            </summary>
            <value>
            Specifies the starting value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the ending value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.By">
            <summary>
            Gets or sets a value that specifies a relative offset value for the animation.
            </summary>
            <value>
            Specifies a relative offset value for the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.Additive">
            <summary>
            Gets or sets a value that controls whether or not the animation is additive.
            </summary>
            <value>
            Posible values are replace | sum, default is sum.
            <list type="bullet">
            <item><term>replace</term>
            <description>
            Specifies that the animation will override the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            <item><term>sum</term>
            <description>
            Specifies that the animation will add to the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.Accumulate">
            <summary>
            Gets or sets a value that controls whether or not the animation is cumulative.
            </summary>
            <value>
            Possible value are none | sum, default is none.
            <list type="bullet">
            <item><term>sum</term>
            <description>
            Specifies that each repeat iteration after the first builds upon the last value of 
            the previous iteration.
            </description>
            </item>
            <item><term>none</term>
            <description>
            Specifies that repeat iterations are not cumulative. This is the default.
            </description>
            </item>
            </list>
            </value>
            <remarks>
            <para>
            This attribute is ignored if the target attribute value does not support addition, 
            or if the animation element does not repeat.
            </para>
            <para>Cumulative animation is not defined for "to animation".</para>
            <para>This attribute will be ignored if the animation function is specified with only the "to" attribute.</para>
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateMotionElement">
            <summary>
            This interface corresponds to the "animateMotion" element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.CalcMode">
            <summary>
            Gets or sets a value that specifies the interpolation mode for the animation. 
            </summary>
            <value>
            This can take any of the following values. The default mode is 'linear', however if the attribute 
            does not support linear interpolation (e.g. for strings), the "calcMode" attribute is ignored 
            and discrete interpolation is used.
            <list type="bullet">
            <item><term>discrete</term>
            <description>
            This specifies that the animation function will jump from one value to the next without any interpolation.
            </description>
            </item>
            <item><term>linear</term>
            <description>
            Simple linear interpolation between values is used to calculate the animation function. 
            Except for "animateMotion", this is the default "calcMode".
            </description>
            </item>
            <item><term>paced</term>
            <description>
            Defines interpolation to produce an even pace of change across the animation.
             If 'paced' is specified, any "keyTimes" or "keySplines" will be ignored. 
             For "animateMotion", this is the default "calcMode". 
            </description>
            </item>
            <item><term>spline</term>
            <description>
            Interpolates from one value in the "values" list to the next according to a time function 
            defined by a cubic Bézier spline. The points of the spline are defined in the "keyTimes" attribute, 
            and the control points for each interval are defined in the "keySplines" attribute.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Values">
            <summary>
            Gets or sets a semicolon-separated list of one or more values. 
            </summary>
            <value>
            Vector-valued attributes are supported using the vector syntax of the "attributeType" domain. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.KeyTimes">
            <summary>
            Gets or sets a semicolon-separated list of time values used to control the pacing of the animation.
            </summary>
            <value>
            Each time in the list corresponds to a value in the "values" attribute list, and defines when the 
            value is used in the animation function. Each time value in the "keyTimes" list is specified as 
            a floating point value between 0 and 1 (inclusive), representing a proportional offset into the 
            simple duration of the animation element.
            </value>
            <remarks>
            <para>
            For animations specified with a "values" list, the "keyTimes" attribute if specified must have 
            exactly as many values as there are in the "values" attribute. For from/to/by animations, 
            the "keyTimes" attribute if specified must have two values.
            </para>
            <para>
            Each successive time value must be greater than or equal to the preceding time value.
            </para>
            <para>
            The "keyTimes" list semantics depends upon the interpolation mode:
            </para>
            <list type="bullet">
            <item>
            <description>
            For linear and spline animation, the first time value in the list must be 0, and the last time 
            value in the list must be 1. The key time associated with each value defines when the value is set; 
            values are interpolated between the key times.
            </description>
            </item>
            <item>
            <description>
            For discrete animation, the first time value in the list must be 0. The time associated with each 
            value defines when the value is set; the animation function uses that value until the next time 
            defined in "keyTimes".
            </description>
            </item>
            </list>
            <para>
            If the interpolation mode is 'paced', the "keyTimes" attribute is ignored.
            </para>
            <para>
            If there are any errors in the "keyTimes" specification (bad values, too many or too few values), 
            the document fragment is in error (see error processing).
            </para>
            <para>
            If the simple duration is indefinite, any "keyTimes" specification will be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.KeySplines">
            <summary>
            Gets or sets a set of Bézier control points associated with the "keyTimes" list, defining a cubic 
            Bézier function that controls interval pacing.
            </summary>
            <value>
            <para>
            The attribute value is a semicolon-separated list of control point descriptions. Each control 
            point description is a set of four values: x1 y1 x2 y2, describing the Bézier control points 
            for one time segment.
            </para>
            <para>
            The values must all be in the range 0 to 1.
            </para>
            <para>
            This attribute is ignored unless the "calcMode" is set to 'spline'.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.From">
            <summary>
            Gets or sets a value that specifies the starting value of the animation.
            </summary>
            <value>
            Specifies the starting value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the ending value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.By">
            <summary>
            Gets or sets a value that specifies a relative offset value for the animation.
            </summary>
            <value>
            Specifies a relative offset value for the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Additive">
            <summary>
            Gets or sets a value that controls whether or not the animation is additive.
            </summary>
            <value>
            Posible values are replace | sum, default is sum.
            <list type="bullet">
            <item><term>replace</term>
            <description>
            Specifies that the animation will override the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            <item><term>sum</term>
            <description>
            Specifies that the animation will add to the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Accumulate">
            <summary>
            Gets or sets a value that controls whether or not the animation is cumulative.
            </summary>
            <value>
            Possible value are none | sum, default is none.
            <list type="bullet">
            <item><term>sum</term>
            <description>
            Specifies that each repeat iteration after the first builds upon the last value of 
            the previous iteration.
            </description>
            </item>
            <item><term>none</term>
            <description>
            Specifies that repeat iterations are not cumulative. This is the default.
            </description>
            </item>
            </list>
            </value>
            <remarks>
            <para>
            This attribute is ignored if the target attribute value does not support addition, 
            or if the animation element does not repeat.
            </para>
            <para>Cumulative animation is not defined for "to animation".</para>
            <para>This attribute will be ignored if the animation function is specified with only the "to" attribute.</para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Path">
            <summary>
            Gets or set the attribute specifying the motion path, expressed in the same format and interpreted the same 
            way as the "d" attribute on the "path" element. 
            </summary>
            <value>
            The effect of a motion path animation is to add a supplemental transformation matrix onto the CTM for the 
            referenced object which causes a translation along the x- and y-axes of the current user coordinate system 
            by the computed X and Y values computed over time.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.KeyPoints">
            <summary>
            Gets or sets a value that takes a semicolon-separated list of floating point values between 0 and 1 and indicates 
            how far along the motion path the object shall move at the moment in time specified by corresponding "keyTimes" value. 
            </summary>
            <value>
            <para>
            Distance calculations use the user agent's distance along the path algorithm. Each progress value in the list 
            corresponds to a value in the "keyTimes" attribute list.
            </para>
            <para>
            If a list of "keyPoints" is specified, there must be exactly as many values in the "keyPoints" list 
            as in the "keyTimes" list.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Rotate">
            <summary>
            Gets or sets an attribute post-multiplies a supplemental transformation matrix onto the CTM of the target element 
            to apply a rotation transformation about the origin of the current user coordinate system. 
            </summary>
            <value>
            The rotation transformation is applied after the supplemental translation transformation that is computed 
            due to the "path" attribute.
            <list type="bullet">
            <item><term>auto</term>
            <description>Indicates that the object is rotated over time by the angle of the direction (i.e., 
            directional tangent vector) of the motion path.</description>
            </item>
            <item><term>auto-reverse</term>
            <description>Indicates that the object is rotated over time by the angle of the direction (i.e., 
            directional tangent vector) of the motion path plus 180 degrees.</description>
            </item>
            <item><term>number</term>
            <description>Indicates that the target element has a constant rotation transformation applied to it, 
            where the rotation angle is the specified number of degrees.</description>
            </item>
            </list>
            The default value is '0'.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Origin">
            <summary>
            The "origin" attribute is defined in the SMIL Animation specification. It has no effect in SVG.
            </summary>
            <value>
            The value is "default".
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateMPathElement">
            <summary>
            This interface corresponds to the "mpath" element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateSetElement">
            <summary>
            Object-oriented access to the attributes of the "set" element via the SVG DOM is not available.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateSetElement.AttributeName">
            <summary>
            Gets or sets the name of the target attribute. An XMLNS prefix may be used to indicate the XML 
            namespace for the attribute. The prefix will be interpreted in the scope of the 
            current (i.e., the referencing) animation element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateSetElement.AttributeType">
            <summary>
            Gets or sets the namespace in which the target attribute and its associated values are defined. 
            </summary>
            <value>
            The attribute value is one of the following (values are case-sensitive): CSS | XML | auto
            <list type="bullet">
            <item><term>CSS</term>
            <description>
            This specifies that the value of "attributeName" is the name of a CSS property 
            defined as animatable in this specification.
            </description>
            </item>
            <item><term>XML</term>
            <description>
            This specifies that the value of "attributeName" is the name of an XML attribute defined 
            in the default XML namespace for the target element.If the value for "attributeName" has 
            an XMLNS prefix, the implementation must use the associated namespace as defined in the 
            scope of the target element.The attribute must be defined as animatable in this specification.
            </description>
            </item>
            <item><term>auto</term>
            <description>
            The implementation should match the "attributeName" to an attribute for the target element.
            The implementation must first search through the list of CSS properties for a matching property name, 
            and if none is found, search the default XML namespace for the element.
            </description>
            </item>
            </list>
            <para>The default value is 'auto'.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateSetElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the value for the attribute during the duration of the ‘set’ element. 
            The argument value must match the attribute type.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateTransformElement">
            <summary>
            This interface corresponds to the "animateTransform" element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.AttributeName">
            <summary>
            Gets or sets the name of the target attribute. An XMLNS prefix may be used to indicate the XML 
            namespace for the attribute. The prefix will be interpreted in the scope of the 
            current (i.e., the referencing) animation element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.AttributeType">
            <summary>
            Gets or sets the namespace in which the target attribute and its associated values are defined. 
            </summary>
            <value>
            The attribute value is one of the following (values are case-sensitive): CSS | XML | auto
            <list type="bullet">
            <item><term>CSS</term>
            <description>
            This specifies that the value of "attributeName" is the name of a CSS property 
            defined as animatable in this specification.
            </description>
            </item>
            <item><term>XML</term>
            <description>
            This specifies that the value of "attributeName" is the name of an XML attribute defined 
            in the default XML namespace for the target element.If the value for "attributeName" has 
            an XMLNS prefix, the implementation must use the associated namespace as defined in the 
            scope of the target element.The attribute must be defined as animatable in this specification.
            </description>
            </item>
            <item><term>auto</term>
            <description>
            The implementation should match the "attributeName" to an attribute for the target element.
            The implementation must first search through the list of CSS properties for a matching property name, 
            and if none is found, search the default XML namespace for the element.
            </description>
            </item>
            </list>
            <para>The default value is 'auto'.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.CalcMode">
            <summary>
            Gets or sets a value that specifies the interpolation mode for the animation. 
            </summary>
            <value>
            This can take any of the following values. The default mode is 'linear', however if the attribute 
            does not support linear interpolation (e.g. for strings), the "calcMode" attribute is ignored 
            and discrete interpolation is used.
            <list type="bullet">
            <item><term>discrete</term>
            <description>
            This specifies that the animation function will jump from one value to the next without any interpolation.
            </description>
            </item>
            <item><term>linear</term>
            <description>
            Simple linear interpolation between values is used to calculate the animation function. 
            Except for "animateMotion", this is the default "calcMode".
            </description>
            </item>
            <item><term>paced</term>
            <description>
            Defines interpolation to produce an even pace of change across the animation.
             If 'paced' is specified, any "keyTimes" or "keySplines" will be ignored. 
             For "animateMotion", this is the default "calcMode". 
            </description>
            </item>
            <item><term>spline</term>
            <description>
            Interpolates from one value in the "values" list to the next according to a time function 
            defined by a cubic Bézier spline. The points of the spline are defined in the "keyTimes" attribute, 
            and the control points for each interval are defined in the "keySplines" attribute.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.Values">
            <summary>
            Gets or sets a semicolon-separated list of one or more values. 
            </summary>
            <value>
            Vector-valued attributes are supported using the vector syntax of the "attributeType" domain. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.KeyTimes">
            <summary>
            Gets or sets a semicolon-separated list of time values used to control the pacing of the animation.
            </summary>
            <value>
            Each time in the list corresponds to a value in the "values" attribute list, and defines when the 
            value is used in the animation function. Each time value in the "keyTimes" list is specified as 
            a floating point value between 0 and 1 (inclusive), representing a proportional offset into the 
            simple duration of the animation element.
            </value>
            <remarks>
            <para>
            For animations specified with a "values" list, the "keyTimes" attribute if specified must have 
            exactly as many values as there are in the "values" attribute. For from/to/by animations, 
            the "keyTimes" attribute if specified must have two values.
            </para>
            <para>
            Each successive time value must be greater than or equal to the preceding time value.
            </para>
            <para>
            The "keyTimes" list semantics depends upon the interpolation mode:
            </para>
            <list type="bullet">
            <item>
            <description>
            For linear and spline animation, the first time value in the list must be 0, and the last time 
            value in the list must be 1. The key time associated with each value defines when the value is set; 
            values are interpolated between the key times.
            </description>
            </item>
            <item>
            <description>
            For discrete animation, the first time value in the list must be 0. The time associated with each 
            value defines when the value is set; the animation function uses that value until the next time 
            defined in "keyTimes".
            </description>
            </item>
            </list>
            <para>
            If the interpolation mode is 'paced', the "keyTimes" attribute is ignored.
            </para>
            <para>
            If there are any errors in the "keyTimes" specification (bad values, too many or too few values), 
            the document fragment is in error (see error processing).
            </para>
            <para>
            If the simple duration is indefinite, any "keyTimes" specification will be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.KeySplines">
            <summary>
            Gets or sets a set of Bézier control points associated with the "keyTimes" list, defining a cubic 
            Bézier function that controls interval pacing.
            </summary>
            <value>
            <para>
            The attribute value is a semicolon-separated list of control point descriptions. Each control 
            point description is a set of four values: x1 y1 x2 y2, describing the Bézier control points 
            for one time segment.
            </para>
            <para>
            The values must all be in the range 0 to 1.
            </para>
            <para>
            This attribute is ignored unless the "calcMode" is set to 'spline'.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.From">
            <summary>
            Gets or sets a value that specifies the starting value of the animation.
            </summary>
            <value>
            Specifies the starting value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the ending value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.By">
            <summary>
            Gets or sets a value that specifies a relative offset value for the animation.
            </summary>
            <value>
            Specifies a relative offset value for the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.Additive">
            <summary>
            Gets or sets a value that controls whether or not the animation is additive.
            </summary>
            <value>
            Posible values are replace | sum, default is sum.
            <list type="bullet">
            <item><term>replace</term>
            <description>
            Specifies that the animation will override the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            <item><term>sum</term>
            <description>
            Specifies that the animation will add to the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.Accumulate">
            <summary>
            Gets or sets a value that controls whether or not the animation is cumulative.
            </summary>
            <value>
            Possible value are none | sum, default is none.
            <list type="bullet">
            <item><term>sum</term>
            <description>
            Specifies that each repeat iteration after the first builds upon the last value of 
            the previous iteration.
            </description>
            </item>
            <item><term>none</term>
            <description>
            Specifies that repeat iterations are not cumulative. This is the default.
            </description>
            </item>
            </list>
            </value>
            <remarks>
            <para>
            This attribute is ignored if the target attribute value does not support addition, 
            or if the animation element does not repeat.
            </para>
            <para>Cumulative animation is not defined for "to animation".</para>
            <para>This attribute will be ignored if the animation function is specified with only the "to" attribute.</para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.Type">
            <summary>
            Gets or sets a value to indicates the type of transformation which is to have its values change over time. 
            </summary>
            <value>
            <para>
            The values are translate | scale | rotate | skewX | skewY.
            </para>
            <para>
            If the attribute is not specified, then the effect is as if a value of 'translate' were specified.
            </para>
            <para>
            The ‘from’, ‘by’ and ‘to’ attributes take a value expressed using the same syntax that is available for the given transformation type:
            </para>
            <list type="bullet">
            <item>
            <description>For a type='translate", each individual value is expressed as {tx} [,{ty}].</description>
            </item>
            <item>
            <description>For a type="scale", each individual value is expressed as {sx} [,{sy}].</description>
            </item>
            <item>
            <description>For a type="rotate", each individual value is expressed as {rotate-angle} [{cx} {cy}].</description>
            </item>
            <item>
            <description>For a type="skewX" and type="skewY", each individual value is expressed as {skew-angle}.</description>
            </item>
            </list>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimationElement">
            <summary>
            This is the base interface for all of the animation element interfaces: 
            <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateSetElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateColorElement"/>, 
            <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateMotionElement"/> and <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateTransformElement"/>.
            </summary>
            <remarks>
            Unlike other SVG DOM interfaces, the SVG DOM does not specify convenience DOM properties corresponding to 
            the various language attributes on SVG's animation elements. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.TargetElement">
            <summary>
            Gets the element which is being animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.StartTime">
            <summary>
            Gets the begin time, in seconds, for this animation element's current interval, if it exists, 
            regardless of whether the interval has begun yet. If there is no current interval, then a 
            <see cref="T:SharpVectors.Dom.DomException"/> with code INVALID_STATE_ERR is thrown.
            </summary>
            <value>
            The start time, in seconds, of this animation element's current interval.
            </value>
            <exception cref="T:SharpVectors.Dom.DomException">The animation element does not have a current interval.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.CurrentTime">
            <summary>
            Gets the current time in seconds relative to time zero for the given time container.
            </summary>
            <value>
            The current time in seconds relative to time zero for the given time container.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.SimpleDuration">
            <summary>
            Gets the number of seconds for the simple duration for this animation. If the simple duration 
            is undefined (e.g., the end time is indefinite), then an exception is raised.
            </summary>
            <value>
            The number of seconds for the simple duration for this animation.
            </value>
            <exception cref="T:SharpVectors.Dom.DomException">The simple duration is not determined on the given element.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Begin">
            <summary>
            Gets or sets values of values that defines when the element should begin (i.e. become active).
            </summary>
            <value>
            The attribute value is a semicolon separated list of values.
            <para>
            If set to "indefinite", the begin of the animation will be determined by a 
            <see cref="M:SharpVectors.Dom.IElementTimeControl.BeginElement"/> method call or a hyperlink targeted to the element.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Duration">
            <summary>
            Gets or sets a value that specifies the simple duration.
            </summary>
            <value>
            <para>The attribute value can be one of the following:</para>
            <list type="bullet">
            <item><term>Clock-value (time duration)</term>
            <description>
            Specifies the length of the simple duration in presentation time. Value must be greater than 0.
            </description>
            </item>
            <item><term>media</term>
            <description>
            Specifies the simple duration as the intrinsic media duration. This is only valid for elements that define media.
            <para>(For SVG's animation elements, if 'media' is specified, the attribute will be ignored.)</para>
            </description>
            </item>
            <item><term>indefinite</term>
            <description>Specifies the simple duration as indefinite.</description>
            </item>
            </list>
            <para>If the animation does not have a "dur" attribute, the simple duration is indefinite.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.End">
            <summary>
            Gets or sets the attribute that defines an end value for the animation that can 
            constrain the active duration. 
            </summary>
            <value>
            <para>
            The attribute value is a semicolon separated list of values.
            </para>
            <para>
            A value of "indefinite" specifies that the end of the animation will be determined by an 
            <see cref="M:SharpVectors.Dom.IElementTimeControl.EndElement"/> method call (the animation DOM methods are 
            described in DOM interfaces).
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Minimum">
            <summary>
            Gets or sets a value that specifies the minimum value of the active duration.
            </summary>
            <value>
            <para>The attribute value can be either of the following:</para>
            <list type="bullet">
            <item><term>Clock-value</term>
            <description>
            Specifies the length of the minimum value of the active duration, measured in local time.
            Value must be greater than 0.
            </description>
            </item>
            <item><term>media</term>
            <description>
            Specifies the minimum value of the active duration as the intrinsic media duration. 
            This is only valid for elements that define media. 
            (For SVG's animation elements, if 'media' is specified, the attribute will be ignored.)
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Maximum">
            <summary>
            Gets or sets the value that specifies the maximum value of the active duration.
            </summary>
            <value>
            <para>The attribute value can be either of the following:</para>
            <list type="bullet">
            <item><term>Clock-value</term>
            <description>
            Specifies the length of the maximum value of the active duration, measured in local time.
            <para>Value must be greater than 0.</para>
            </description>
            </item>
            <item><term>media</term>
            <description>
            Specifies the maximum value of the active duration as the intrinsic media duration. 
            This is only valid for elements that define media. (For SVG's animation elements, if 
            'media' is specified, the attribute will be ignored.)
            </description>
            </item>
            </list>
            <para>There is no default value for "max". This does not constrain the active duration at all.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Restart">
            <summary>
            Gets or sets the attribute that controls the circumstances under which an animation is restarted.
            </summary>
            <value>
            <list type="bullet">
            <item><term>always</term>
            <description>The animation can be restarted at any time. This is the default value.</description>
            </item>
            <item><term>whenNotActive</term>
            <description>
            The animation can only be restarted when it is not active (i.e. after the active end). 
            Attempts to restart the animation during its active duration are ignored.
            </description>
            </item>
            <item><term>never</term>
            <description>
            The element cannot be restarted for the remainder of the current simple duration of the parent 
            time container. (In the case of SVG, since the parent time container is the SVG document fragment, 
            then the animation cannot be restarted for the remainder of the document duration.)
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.RepeatCount">
            <summary>
            Gets or sets a value that specifies the number of iterations of the animation function. 
            </summary>
            <value>
            It can have the following attribute values:
            <list type="bullet">
            <item><term>numeric value</term>
            <description>
            This is a (base 10) "floating point" numeric value that specifies the number of iterations. 
            It can include partial iterations expressed as fraction values. 
            A fractional value describes a portion of the simple duration. Values must be greater than 0.
            </description>
            </item>
            <item><term>indefinite</term>
            <description>
            The animation is defined to repeat indefinitely (i.e. until the document ends).
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.RepeatDuration">
            <summary>
            Gets or sets a value that specifies the total duration for repeat. 
            </summary>
            <value>
            It can have the following attribute values: 
            <list type="bullet">
            <item><term>Clock-value</term>
            <description>Specifies the duration in presentation time to repeat the animation function f(t).</description>
            </item>
            <item><term>indefinite</term>
            <description>The animation is defined to repeat indefinitely (i.e. until the document ends).</description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Fill">
            <summary>
            Gets or sets the attribute can be used to maintain the value of the animation after 
            the active duration of the animation element ends.
            </summary>
            <value>
            This attribute can have the following values:
            <list type="bullet">
            <item><term>freeze</term>
            <description>
            The animation effect F(t) is defined to freeze the effect value at the last value of the active duration. 
            The animation effect is "frozen" for the remainder of the document duration.
            </description>
            </item>
            <item><term>remove</term>
            <description>
            The animation effect is removed (no longer applied) when the active duration of the animation is over. 
            After the active end of the animation, the animation no longer affects the target. This is the default value.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextPathMethod">
            <summary>
            Indicates the method by which text should be rendered along the path.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTextPathMethod.Align">
            <summary>
            A value of align indicates that the glyphs should be rendered using 
            simple 2x3 transformations such that there is no stretching/warping 
            of the glyphs. Typically, supplemental rotation, scaling and translation 
            transformations are done for each glyph to be rendered. As a result, 
            with align, fonts where the glyphs are designed to be connected (e.g., 
            cursive fonts), the connections may not align properly when text is 
            rendered along a path.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTextPathMethod.Stretch">
            <summary>
            A value of stretch indicates that the glyph outlines will be converted 
            into paths, and then all end points and control points will be adjusted 
            to be along the perpendicular vectors from the path, thereby stretching 
            and possibly warping the glyphs. With this approach, connected glyphs, 
            such as in cursive scripts, will maintain their connections.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextPathSpacing">
            <summary>
            Indicates how the user agent should determine the spacing between glyphs 
            that are to be rendered along a path.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTextPathSpacing.Exact">
            <summary>
            A value of exact indicates that the glyphs should be rendered exactly 
            according to the spacing rules as specified in "Text on a path layout rules".
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTextPathSpacing.Auto">
            <summary>
            A value of auto indicates that the user agent should use text-on-a-path 
            layout algorithms to adjust the spacing between glyphs in order to achieve 
            visually appealing results.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISharpMarkerHost">
            <summary>
            This is an extension to the Svg DOM. It denotes that an element can display markers.
            </summary>
            <remarks>
            <para>
            A marker is a symbol which is attached to one or more vertices of some Svg elements. In order for 
            a marker to be drawn correctly, its orientation and position needs to be known.
            See <see href="http://www.w3.org/TR/SVG/painting.html">SVG 1.0 Masking - Establishing A New Clipping Path</see>
            </para>
            <para>
            This interface provides the information required to calculate the
            orientation and position for each marker of an Svg element.
            </para>
            <para>
            To give an Svg element the capability to draw markers, let the Svg element implement this interface.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISharpMarkerHost.MarkerPositions">
            <summary>
            An array specifying the position of each vertex in the Svg element's shape.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISharpMarkerHost.GetStartAngle(System.Int32)">
            <summary>
            Get the angle of the path segment entering the specified vertex.
            </summary>
            <param name="index">
            Specifies the vertex to which the path segment is entering.
            </param>
            <returns>
            The angle of the path segment entering the specified vertex in degrees.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISharpMarkerHost.GetEndAngle(System.Int32)">
            <summary>
            Get the angle of the path segment leaving the specified vertex in degrees.
            </summary>
            <param name="index">
            Specifies the vertex from which the path segment is leaving.
            </param>
            <returns>
            The angle of the path segment leaving the specified vertex.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgClipPathElement">
            <summary>
            Used by SvgClipPathElement.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgMaskElement">
            <summary>
            Used by SvgMaskElement.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTransformF">
            <summary>
            This is an implementation of the 3-by-3 affine matrix that represents 
            a geometric transform.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class
            as the identity transform or matrix.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgPointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class 
            to the geometric transform defined by the specified rectangle and 
            array of points.
            </summary>
            <param name="rect">
            A <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that represents the rectangle 
            to be transformed.
            </param>
            <param name="plgpts">
            An array of three <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures that represents the 
            points of a parallelogram to which the upper-left, upper-right, and 
            lower-left corners of the rectangle is to be transformed. The 
            lower-right corner of the parallelogram is implied by the first three 
            corners.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="plgpts"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the length of the <paramref name="plgpts"/> array is not equal
            to 3.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the width or height of the <paramref name="rect"/> is zero.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class 
            with the specified elements.
            </summary>
            <param name="elements">
            An array of six items defining the transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="elements"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the length of the <paramref name="elements"/> array is not equal
            to 6.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class 
            with the specified elements.
            </summary>
            <param name="m11">
            The value in the first row and first column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="m12">
            The value in the first row and second column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="m21">
            The value in the second row and first column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="m22">
            The value in the second row and second column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="dx">
            The value in the third row and first column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="dy">
            The value in the third row and second column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor(SharpVectors.Dom.Svg.SvgTransformF)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class
            with parameters copied from the specified parameter, a copy 
            constructor.
            </summary>
            <param name="source">
            The <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> instance from which the parameters
            are to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.Elements">
            <summary>
            Gets an array of floating-point values that represents the elements 
            of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <value>
            An array of floating-point values that represents the elements 
            of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.IsIdentity">
            <summary>               
            Gets a value indicating whether this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> is the 
            identity matrix.
            </summary>
            <value>
            This property is <see langword="true"/> if this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> is identity; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.IsInvertible">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> is 
            invertible.
            </summary>
            <value>
            This property is <see langword="true"/> if this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> is invertible; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.OffsetX">
            <summary>
            Gets the <c>x</c> translation value (the <c>dx</c> value, or the 
            element in the third row and first column) of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <value>
            The <c>x</c> translation value of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.OffsetY">
            <summary>
            Gets the <c>y</c> translation value (the <c>dy</c> value, or the 
            element in the third row and second column) of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <value>
            The <c>y</c> translation value of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Equals(System.Object)">
            <summary>
            Determine whether the specified object is a <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            and is identical to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <param name="obj">The object to test.</param>
            <returns>
            This method returns <see langword="true"/> if obj is the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> identical to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>The hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Invert">
            <summary>
            Inverts this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>, if it is invertible.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Multiply(SharpVectors.Dom.Svg.SvgTransformF)">
            <overloads>
            Multiplies this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by appending or prepending the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </overloads>
            <summary>
            Multiplies this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by prepending the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <param name="matrix">
            The <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by which this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            is to be multiplied.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Multiply(SharpVectors.Dom.Svg.SvgTransformF,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Multiplies this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by the matrix specified in 
            the matrix parameter, and in the order specified in the order parameter.
            </summary>
            <param name="matrix">
            The <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by which this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            is to be multiplied.
            </param>
            <param name="order">
            The <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that represents the order of the 
            multiplication.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Reset">
            <summary>
            Resets this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> to have the elements of the 
            identity matrix.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Rotate(System.Single)">
            <overloads>
            Applies a clockwise rotation of the specified angle about the 
            origin to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>. 
            </overloads>
            <summary>
            Applies a clockwise rotation of the specified angle about the 
            origin to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>. 
            </summary>
            <param name="angle">
            The angle (extent) of the rotation, in degrees.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Rotate(System.Single,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies a clockwise rotation of the specified angle about the 
            origin to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>, and in the order specified 
            in the order parameter. 
            </summary>
            <param name="angle">
            The angle (extent) of the rotation, in degrees.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the rotation is applied to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.RotateAt(System.Single,SharpVectors.Dom.Svg.SvgPointF)">
            <overloads>
            Applies a clockwise rotation about the specified point to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by appending or prepending the rotation.
            </overloads>
            <summary>
            Applies a clockwise rotation about the specified point to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by prepending the rotation.
            </summary>
            <param name="angle">
            The angle (extent) of the rotation, in degrees.
            </param>
            <param name="point">
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> that represents the center of the rotation.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.RotateAt(System.Single,SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies a clockwise rotation about the specified point to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the specified order. 
            </summary>
            <param name="angle">
            The angle (extent) of the rotation, in degrees.
            </param>
            <param name="point">
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> that represents the center of the rotation.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the rotation is applied.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Scale(System.Single,System.Single)">
            <overloads>
            Applies the specified scale vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            by appending or prepending the scale vector.
            </overloads>
            <summary>
            Applies the specified scale vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            by prepending the scale vector.
            </summary>
            <param name="scaleX">
            The value by which to scale this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the 
            x-axis direction.
            </param>
            <param name="scaleY">
            The value by which to scale this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the 
            y-axis direction.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Scale(System.Single,System.Single,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies the specified scale vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            using the specified order.
            </summary>
            <param name="scaleX">
            The value by which to scale this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the 
            x-axis direction.
            </param>
            <param name="scaleY">
            The value by which to scale this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the 
            y-axis direction.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the scale vector is applied to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Shear(System.Single,System.Single)">
            <overloads>
            Applies the specified shear vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by 
            appending or prepending the shear vector.
            </overloads>
            <summary>
            Applies the specified shear vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by 
            prepending the shear vector.
            </summary>
            <param name="shearX">
            The horizontal shear factor.
            </param>
            <param name="shearY">
            The vertical shear factor.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Shear(System.Single,System.Single,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies the specified shear vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in 
            the specified order.
            </summary>
            <param name="shearX">
            The horizontal shear factor.
            </param>
            <param name="shearY">
            The vertical shear factor.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the shear is applied.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Translate(System.Single,System.Single)">
            <overloads>
            Applies the specified translation vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            by appending or prepending the translation vector.
            </overloads>
            <summary>
            Applies the specified translation vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            by prepending the translation vector.
            </summary>
            <param name="offsetX">
            The <c>x</c> value by which to translate this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="offsetY">
            The <c>y</c> value by which to translate this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Translate(System.Single,System.Single,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies the specified translation vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            in the specified order.
            </summary>
            <param name="offsetX">
            The <c>x</c> value by which to translate this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="offsetY">
            The <c>y</c> value by which to translate this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the translation is applied to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Transform(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Applies the geometric transform represented by this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> to a specified point. 
            </summary>
            <param name="x">The input <c>x</c> value of the point.</param>
            <param name="y">The input <c>y</c> value of the point.</param>
            <param name="ox">The transformed <c>x</c> value of the point.</param>
            <param name="oy">The transformed <c>y</c> value of the point.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.ReverseTransform(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Applies the reverse geometric transform represented by this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> to a specified point. 
            </summary>
            <param name="x">The input <c>x</c> value of the point.</param>
            <param name="y">The input <c>y</c> value of the point.</param>
            <param name="ox">The transformed <c>x</c> value of the point.</param>
            <param name="oy">The transformed <c>y</c> value of the point.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.TransformPoints(SharpVectors.Dom.Svg.SvgPointF[])">
            <summary>
            Applies the geometric transform represented by this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> to a specified array of points. 
            </summary>
            <param name="pts">
            An array of <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures that represents the points 
            to transform.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.TransformVectors(SharpVectors.Dom.Svg.SvgPointF[])">
            <summary>
            Multiplies each vector in an array by the matrix. The translation 
            elements of this matrix (third row) are ignored.
            </summary>
            <param name="pts">
            An array of <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures that represents the points 
            to transform.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Clone">
            <summary>
            This creates a new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> that is a deep 
            copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.System#ICloneable#Clone">
            <summary>
            This creates a new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> that is a deep 
            copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPointF">
            <summary>
            This represents an ordered pair of float precision x- and y-coordinates 
            that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgPointF.Empty">
            <summary>
            Represents a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure 
            with member data left uninitialized.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure 
            with the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the point. </param>
            <param name="y">The y-coordinate of the point. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure 
            with the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the point. </param>
            <param name="y">The y-coordinate of the point. </param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> is empty.
            </summary>
            <value>
            This is <see langword="true"/> if both <see cref="P:SharpVectors.Dom.Svg.SvgPointF.X"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgPointF.Y"/> are 0; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.X">
            <summary>
            Gets the x-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <value>
            The x-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.Y">
            <summary>
            Gets the y-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <value>
            The y-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.ValueX">
            <summary>
            Gets or sets the x-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <value>
            The x-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.ValueY">
            <summary>
            Gets or sets the y-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <value>
            The y-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.op_Addition(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This translates the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> by the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <param name="sz">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that specifies the numbers to add to the 
            x- and y-coordinates of the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </param>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to translate.</param>
            <returns>The translated <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.op_Subtraction(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This translates a <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> by the negative of a specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. 
            </summary>
            <param name="sz">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that specifies the numbers to subtract from 
            the coordinates of pt.
            </param>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to translate.</param>
            <returns>The translated <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.op_Equality(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This compares two <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures. The result 
            specifies whether the values of the <see cref="P:SharpVectors.Dom.Svg.SvgPointF.X"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgPointF.Y"/> properties of the two <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> 
            structures are equal.
            </summary>
            <param name="right">A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to compare. </param>
            <param name="left">A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to compare. </param>
            <returns>
            This is <see langword="true"/> if the <see cref="P:SharpVectors.Dom.Svg.SvgPointF.X"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgPointF.Y"/> values of the left and right 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.op_Inequality(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This determines whether the coordinates of the specified points are 
            not equal.
            </summary>
            <param name="left">A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to compare.</param>
            <param name="right">A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to compare.</param>
            <returns>
            This <see langword="true"/> to indicate the <see cref="P:SharpVectors.Dom.Svg.SvgPointF.X"/> 
            and <see cref="P:SharpVectors.Dom.Svg.SvgPointF.Y"/> values of left and right are not equal; 
            otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Distance(SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This computes the distance between this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>
            and the specified <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <param name="point">
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> object specifying the other point from
            which to determine the distance.
            </param>
            <returns>
            The distance between this point and the specified point.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Equals(System.Object)">
            <summary>
            This determines whether this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> contains the same 
            coordinates as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test. 
            </param>
            <returns>
            This method returns <see langword="true"/> if the specified object 
            is a <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> and has the same coordinates as this 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Equals(SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This determines whether this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> contains the same 
            coordinates as the specified <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <param name="other">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to test.</param>
            <returns>
            This method returns <see langword="true"/> if the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> has the same coordinates as this 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.GetHashCode">
            <summary>
            This returns a hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure.
            </summary>
            <returns>
            An integer value that specifies a hash value for this 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.ToString">
            <summary>
            This converts this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to a human readable string.
            </summary>
            <returns>
            A string that represents this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Add(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This translates a given <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> by a specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to translate.</param>
            <param name="sz">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that specifies the numbers to add to the 
            coordinates of pt.
            </param>
            <returns>The translated <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Subtract(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This translates a <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> by the negative of a 
            specified size.
            </summary>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to translate.</param>
            <param name="sz">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that specifies the numbers to subtract from 
            the coordinates of pt.
            </param>
            <returns>The translated <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgRectF">
            <summary>
            This stores a set of four float precision numbers that represent the 
            location and size of a rectangle.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgRectF.Empty">
            <summary>
            Represents an instance of the <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure 
            with its members uninitialized.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure with the specified location and size.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the rectangle. 
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the rectangle. 
            </param>
            <param name="width">The width of the rectangle. </param>
            <param name="height">The height of the rectangle. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.#ctor(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure 
            with the specified location and size.
            </summary>
            <param name="size">
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that represents the width and height of the 
            rectangular region.
            </param>
            <param name="location">
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> that represents the upper-left corner 
            of the rectangular region. 
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Create(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure with upper-left corner 
            and lower-right corner at the specified locations.
            </summary>
            <param name="left">
            The x-coordinate of the upper-left corner of the rectangular region. 
            </param>
            <param name="top">
            The y-coordinate of the upper-left corner of the rectangular region.
            </param>
            <param name="right">
            The x-coordinate of the lower-right corner of the rectangular region. 
            </param>
            <param name="bottom">
            The y-coordinate of the lower-right corner of the rectangular region.
            </param>
            <returns>
            The new <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> that this method creates.
            </returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> that represents the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Size">
            <summary>
            Gets or sets the size of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.
            </summary>
            <value>
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that represents the width and height of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            The x-coordinate of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            The y-coordinate of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Width">
            <summary>
            Gets or sets the width of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            The width of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Height">
            <summary>
            Gets or sets the height of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            The height of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <value>
            The x-coordinate of the left edge of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <value>
            The y-coordinate of the top edge of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Right">
            <summary>
            Gets the x-coordinate that is the sum of <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/> 
            and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/> of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <value>
            The x-coordinate that is the sum of <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/> of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/> 
            and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <value>
            The y-coordinate that is the sum of <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.IsEmpty">
            <summary>
            Tests whether the <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/> or 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> property of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> has a value of zero.
            </summary>
            <value>
            This property returns true if the <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/> or 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> property of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> has a value of zero; otherwise, false.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Equals(System.Object)">
            <summary>
            This tests whether an object is a <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> with the 
            same location and size of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to test. 
            </param>
            <returns>
            This returns <see langword="true"/> if the specified object is a 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> and its <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/>, and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> properties are equal 
            to the corresponding properties of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Equals(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This tests whether the specified <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> is with 
            the same location and size of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.
            </summary>
            <param name="other">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> to test. 
            </param>
            <returns>
            This returns <see langword="true"/> if specified <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            has its <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/>, and 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> properties are equal to the corresponding 
            properties of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Contains(System.Single,System.Single)">
            <overloads>
            This determines if the specified point or rectangle is contained 
            within this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </overloads>
            <summary>
            This determines if the specified point is contained within this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test. </param>
            <param name="y">The y-coordinate of the point to test. </param>
            <returns>
            This method returns true if the point defined by x and y is 
            contained within this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure; otherwise 
            false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Contains(SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This determines if the specified point is contained within this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to test. </param>
            <returns>
            This method returns true if the point represented by the pt 
            parameter is contained within this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure; otherwise false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Contains(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This determines if the rectangular region represented by rect is 
            entirely contained within this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <param name="rect">The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> to test. </param>
            <returns>
            This method returns true if the rectangular region represented by 
            rect is entirely contained within the rectangular region represented 
            by this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>; otherwise false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure. 
            For information about the use of hash codes, see Object.GetHashCode.
            </summary>
            <returns>The hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Inflate(System.Single,System.Single)">
            <overloads>
            Inflates this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure by the specified 
            amount.
            </overloads>
            <summary>
            Inflates this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure by the specified 
            amount.
            </summary>
            <param name="x">The amount to inflate this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure horizontally. </param>
            <param name="y">The amount to inflate this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure vertically. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Inflate(SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Inflates this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> by the specified amount.
            </summary>
            <param name="size">The amount to inflate this rectangle. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Intersection(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This replaces this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure with the 
            intersection of itself and the specified <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <param name="rect">The rectangle to intersect. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Intersects(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This determines if this rectangle intersects with rect.
            </summary>
            <param name="rect">The rectangle to test. </param>
            <returns>
            This method returns <see langword="true"/> if there is any 
            intersection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Offset(SharpVectors.Dom.Svg.SvgPointF)">
            <overloads>
            Adjusts the location of this rectangle by the specified amount.
            </overloads>
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="pos">The amount to offset the location. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Offset(System.Single,System.Single)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="y">The amount to offset the location vertically. </param>
            <param name="x">The amount to offset the location horizontally. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.ToString">
            <summary>
            Converts the Location and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Size"/> of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> to a human-readable string.
            </summary>
            <returns>
            A string that contains the position, width, and height of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure; for example, 
            "{X=20, Y=20, Width=100, Height=50}".
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.op_Equality(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structures have equal 
            location and size.
            </summary>
            <param name="left">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that is to the left of the 
            equality operator. 
            </param>
            <param name="right">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that is to the right of the 
            equality operator. 
            </param>
            <returns>
            This operator returns true if the two specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structures have equal 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/>, and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/>
            properties.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.op_Inequality(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structures differ in 
            location or size.</summary>
            <param name="left">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that is to the left of the 
            inequality operator. 
            </param>
            <param name="right">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that is to the right of the 
            inequality operator. 
            </param>
            <returns>
            This operator returns true if any of the <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/>, or 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> properties of the two 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structures are unequal; otherwise false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Inflate(SharpVectors.Dom.Svg.SvgRectF,System.Single,System.Single)">
            <summary>
            Creates and returns an inflated copy of the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure. The copy is inflated by the 
            specified amount. The original rectangle remains unmodified.
            </summary>
            <param name="rect">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> to be copied. This rectangle is not 
            modified. 
            </param>
            <param name="x">
            The amount to inflate the copy of the rectangle horizontally. 
            </param>
            <param name="y">
            The amount to inflate the copy of the rectangle vertically. 
            </param>
            <returns>The inflated <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Intersection(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            Returns a <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that represents the 
            intersection of two rectangles. If there is no intersection, and 
            empty <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect. </param>
            <param name="b">A rectangle to intersect. </param>
            <returns>
            A third <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure the size of which 
            represents the overlapped area of the two specified rectangles.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Union(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            Creates the smallest possible third rectangle that can contain both 
            of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union. </param>
            <param name="b">A rectangle to union. </param>
            <returns>
            A third <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that contains both of 
            the two rectangles that form the union.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgSizeF">
            <summary>
            Stores an ordered pair of floating-point numbers, typically the width 
            and height of a rectangle.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgSizeF.Empty">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> class.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.#ctor(System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> class from the specified dimensions.</summary>
            <param name="width">The width component of the new <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. </param>
            <param name="height">The height component of the new <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.#ctor(SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> class from the specified existing <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.</summary>
            <param name="size">The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> from which to create the new <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.#ctor(SharpVectors.Dom.Svg.SvgPointF)">
            <summary>Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> class from the specified <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</summary>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> from which to initialize this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Addition(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Adds the width and height of one <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure 
            to the width and height of another <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <param name="sz1">The first <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to add.</param>
            <param name="sz2">The second <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to add.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure that is the result of the 
            addition operation.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Subtraction(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Subtracts the width and height of one <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> 
            structure from the width and height of another 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <param name="sz1">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> on the left side of the subtraction 
            operator. 
            </param>
            <param name="sz2">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> on the right side of the subtraction 
            operator. 
            </param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that is the result of the subtraction 
            operation.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Equality(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structures are equal.
            </summary>
            <param name="sz1">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the left side of the 
            equality operator. 
            </param>
            <param name="sz2">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the right of the equality 
            operator. 
            </param>
            <returns>
            This operator returns <see langword="true"/> if <paramref name="sz1"/> 
            and <paramref name="sz2"/> have equal width and height; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Inequality(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structures are different.
            </summary>
            <param name="sz1">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the left of the inequality 
            operator. 
            </param>
            <param name="sz2">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the right of the inequality 
            operator. 
            </param>
            <returns>
            This operator returns <see langword="true"/> if 
            <paramref name="sz1"/> and <paramref name="sz2"/> differ either 
            in width or height; <see langword="false"/> if <paramref name="sz1"/> 
            and <paramref name="sz2"/> are equal.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Explicit(SharpVectors.Dom.Svg.SvgSizeF)~SharpVectors.Dom.Svg.SvgPointF">
            <summary>
            This converts the specified <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to a 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <param name="size">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure to be converted.
            </param>
            <returns>
            The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure specifying the result of the
            conversion.
            </returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSizeF.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> has zero 
            width and height.
            </summary>
            <value>
            This property returns <see langword="true"/> when this 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> has both a width and height of zero; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSizeF.Width">
            <summary>
            Gets or sets the horizontal component of this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <value>
            The horizontal component of this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSizeF.Height">
            <summary>
            Gets or sets the vertical component of this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <value>
            The vertical component of this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.Equals(System.Object)">
            <summary>
            This tests whether the specified object is a <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> 
            with the same dimensions as this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test. </param>
            <returns>
            This returns <see langword="true"/> if specified object is a 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> and has the same width and height as this 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.Equals(SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This to see whether the specified <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> is with the 
            same dimensions as this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <param name="other">The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to test. </param>
            <returns>
            This returns <see langword="true"/> if the specified <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> and has 
            the same width and height as this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.GetHashCode">
            <summary>
            This returns a hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <returns>
            An integer value that specifies a hash value for this 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.ToString">
            <summary>
            This creates a human-readable string that represents this 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <returns>A string that represents this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.Add(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Adds the width and height of one <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure to 
            the width and height of another <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <param name="sz1">The first <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to add.</param>
            <param name="sz2">The second <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to add.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure that is the result of the addition 
            operation.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.Subtract(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Subtracts the width and height of one <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> 
            structure from the width and height of another 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <param name="sz1">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the left side of the 
            subtraction operator. 
            </param>
            <param name="sz2">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the right side of the 
            subtraction operator. 
            </param>
            <returns>
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that is a result of the subtraction 
            operation.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAngle">
            <summary>
            The SvgAngle interface corresponds to the angle basic data 
            type. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAngle.UnitType">
            <summary>
            The type of the value as specified by the SvgAngleType 
            enum class.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAngle.Value">
            <summary>
            The angle value as a floating point value, in degrees. 
            Setting this attribute will cause valueInSpecifiedUnits 
            and valueAsString to be updated automatically to reflect 
            this setting.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAngle.ValueInSpecifiedUnits">
            <summary>
            The angle value as a floating point value, in the units 
            expressed by unitType. Setting this attribute will cause
            value and valueAsString to be updated automatically to 
            reflect this setting.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAngle.ValueAsString">
            <summary>
            The angle value as a string value, in the units expressed
            by unitType. Setting this attribute will cause value and 
            valueInSpecifiedUnits to be updated automatically to 
            reflect this setting.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAngle.NewValueSpecifiedUnits(SharpVectors.Dom.Svg.SvgAngleType,System.Double)">
            <summary>
            Reset the value as a number with an associated unitType,
            thereby replacing the values for all of the attributes on 
            the object.
            </summary>
            <param name="unitType"> The unitType for the angle value (e.g., SvgAngleTypeDEG).</param>
            <param name="valueInSpecifiedUnits">The angle value.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAngle.ConvertToSpecifiedUnits(SharpVectors.Dom.Svg.SvgAngleType)">
            <summary>
            Preserve the same underlying stored value, but reset the
            stored unit identifier to the given unitType. Object 
            attributes unitType, valueAsSpecified and valueAsString 
            might be modified as a result of this method.
            </summary>
            <param name="unitType">The unitType to switch to (e.g., SvgAngleTypeDEG).</param>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedBoolean">
            <summary>
            Used for attributes of type boolean which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedBoolean.BaseVal">
            <summary>
            The base value of the given attribute before applying
            any animations.  Inheriting class should throw an exception 
            if it is readonly.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedBoolean.AnimVal">
            <summary>
            If the given attribute or property is being animated, 
            contains the current animated value of the attribute or 
            property. If the given attribute or property is not 
            currently being animated, contains the same value as 
            'baseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedEnumeration">
            <summary>
            Used for attributes whose value must be a constant from 
            a particular enumeration and which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedEnumeration.BaseVal">
            <summary>
            The base value of the given attribute before 
            applying any animations.  Inheriting Class should throw
            an exception when the value is read only
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedEnumeration.AnimVal">
            <summary>
            If the given attribute or property is being animated, 
            contains the current animated value of the attribute or 
            property. If the given attribute or property is not 
            currently being animated, contains the same value as 
            'BaseVal'. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedLength">
            <summary>
            Used for attributes of basic type 'length' which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLength.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLength.AnimVal">
            <summary>
            If the given attribute or property is being animated, contains the current animated 
            value of the attribute or property, and both the object itself and its contents are 
            readonly. If the given attribute or property is not currently being animated, contains 
            the same value as 'baseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedLengthList">
            <summary>
            Used for attributes of type SvgLengthList which can be 
            animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLengthList.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLengthList.AnimVal">
            <summary>
            If the given attribute or property is being animated, contains the current animated value of the 
            attribute or property, and both the object itself and its contents are readonly. If the given 
            attribute or property is not currently being animated, contains the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLengthList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedLengthList"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedLengthList"/>.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLengthList.Item(System.UInt32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedNumber">
            <summary>
            Used for attributes of basic type 'number' which can be 
            animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumber.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations.  Inheriting class should throw an
            exception if the value is read only.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumber.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property, and both the object itself and its 
                contents are readonly. If the given attribute or 
                property is not currently being animated, contains 
                the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedNumberList">
            <summary>
            Used for attributes which take a list of numbers and 
            which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumberList.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumberList.AnimVal">
            <summary>
            If the given attribute or property is being animated, then this attribute contains the current animated
            value of the attribute or property, and both the object itself and its contents are readonly. If the given 
            attribute or property is not currently being animated, then this attribute contains the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumberList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedNumberList"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedNumberList"/>.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumberList.Item(System.UInt32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedRect">
            <summary>
            Used for attributes of type SvgRect which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedRect.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedRect.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property, and both the object itself and its 
                contents are readonly. If the given attribute or 
                property is not currently being animated, contains 
                the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedString">
            <summary>
            Used for attributes of type DOMString which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedString.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations.  Inheriting class should throw an
            exception if this value is read only.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedString.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property. If the given attribute or property is 
                not currently being animated, contains the same 
                value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgColor">
            <summary>
            The SvgColor interface corresponds to color value definition
            for properties 'stop-color', 'flood-color' and 
            'lighting-color' and is a base class for interface SvgPaint.
            It incorporates Svg's extended notion of color, which 
            incorporates ICC-based color specifications. 
            
            Interface SVGColor does not correspond to the color basic 
            data type. For the color basic data type, the applicable 
            DOM interfaces are defined in CSS; in particular, see 
            the ICssRgbColor interface. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgCursorElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgElement">
            <summary>
            All of the Svg DOM interfaces that correspond directly to 
            elements in the Svg language (e.g., the SvgPathElement 
            interface corresponds directly to the 'path' element in the 
            language) are derivative from base class SvgElement. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.Id">
            <summary>
            The value of the id attribute on the given element.
            Inheriting class should throw an exception when trying
            to update a read only element
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.OwnerSvgElement">
            <summary>
            The nearest ancestor 'svg' element. Null if the given 
            element is the outermost 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.ViewportElement">
            <summary>
                The element which established the current viewport. 
                Often, the nearest ancestor 'svg' element. Null if 
                the given element is the outermost 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgEvent">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgExternalResourcesRequired">
            <summary>
            Interface SvgExternalResourcesRequired defines an interface 
            which applies to all elements where this element or one of its 
            descendants can reference an external resource. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgExternalResourcesRequired.ExternalResourcesRequired">
            <summary>
            Corresponds to attribute externalResourcesRequired on the 
            given element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFitToViewBox">
            <summary>
            Interface SvgFitToViewBox defines DOM attributes that apply to 
            elements which have XML attributes viewBox and preserveAspectRatio.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgIccColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgIccColor.Colors">
            <summary>
            The list of color values that define this ICC color. 
            Each color value is an arbitrary floating point number. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgIccColor.ColorProfile">
            <summary>
            The name of the color profile, which is the first 
            parameter of an ICC color specification.  Inheriting
            class should throw exception on setting a read only value 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLangSpace">
            <summary>
            Interface SvgLangSpace defines an interface which applies to all elements which have attributes xml:lang and xml:space. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLength">
            <summary>
            The SvgLength interface corresponds to the length basic data type. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLengthList">
            <summary>
            This interface defines a list of SvgLength objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgList">
            <summary>
            This interface defines a all methods used in a Svg*List interface. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLocatable">
            <summary>
            Interface SvgLocatable is for all elements which either have a 
            transform attribute or don't have a transform attribute but whose
            content can have a bounding box in current user space. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgNumber">
            <summary>
            Used for attributes of basic type 'number'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgNumberList">
            <summary>
            This interface defines a list of SvgNumber objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgRect">
            <summary>
            Rectangles are defined as consisting of a (x,y) coordinate pair identifying 
            a minimum X value, a minimum Y value, and a width and height, which are usually 
            constrained to be non-negative. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgStringList">
            <summary>
            This interface defines a list of string objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgStylable">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTests">
            <summary>
            Interface SvgTests defines an interface which applies to all elements which 
            have attributes requiredFeatures, requiredExtensions and systemLanguage. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTransformable">
            <summary>
            Interface SvgTransformable contains properties and methods that apply to all elements 
            which have attribute transform. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgUriReference">
            <summary>
            Interface SvgUriReference defines an interface which applies to all elements which 
            have the collection of XLink attributes, such as xlink:href, which define a URI reference. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgViewElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgViewSpec">
            <summary>
            The interface corresponds to an Svg View Specification. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgZoomAndPan">
            <summary>
            The SvgZoomAndPan interface defines attribute "zoomAndPan" and associated constants.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAngleType">
            <summary>
            	The basic Angle Value Types
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Unknown">
            <summary>
               The unit type is not one of predefined unit types. It is invalid to attempt to 
               define a new value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Unspecified">
            <summary>
            No unit type was provided (i.e., a unitless value was specified). For angles, a 
            unitless value is treated the same as if degrees were specified.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Deg">
            <summary>
              The unit type was explicitly set to degrees.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Rad">
            <summary>
            The unit type is radians.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Grad">
            <summary>
            The unit type is grads.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgColorType">
            <summary>
            Basic color type enumeration.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterBlendMode">
            <summary>
            The basic Filter Blend Modes
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterChannelSelector">
            <summary>
            The Filter Channel Selectors
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterColorMatrix">
            <summary>
            The basic Filter Matrix Types
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterTransferType">
            <summary>
            The Filter Component Transfer Types
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterCompositeOperator">
            <summary>
            The Filter Composite Operators
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterEdgeMode">
            <summary>
            The Filter Edge Mode Types
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterStitchOption">
            <summary>
            The Filter Stitch Options
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterTurbulenceType">
            <summary>
            The Filter Turbulence Types
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgMorphologyOperator">
            <summary>
            The Morphology Operator
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgZoomAndPanType">
            <summary>
            Summary description for SvgZoomAndPanType.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedPoints">
            <summary>
            The SvgAnimatedPoints interface supports elements which have a 
            'points' attribute which holds a list of coordinate values and 
            which support the ability to animate that attribute. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgCircleElement">
            <summary>
            The SvgCircleElement interface corresponds to the 'circle' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgCircleElement.Cx">
            <summary>
            Corresponds to attribute cx on the given 'circle' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgCircleElement.Cy">
            <summary>
            Corresponds to attribute cy on the given 'circle' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgCircleElement.R">
            <summary>
            Corresponds to attribute r on the given 'circle' element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgEllipseElement">
            <summary>
            The SvgEllipseElement interface corresponds to the 'ellipse' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLineElement">
            <summary>
            The SvgLineElement interface corresponds to the 'line' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPolygonElement">
            <summary>
            The SvgPolygonElement interface corresponds to the 'polygon' element
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPolylineElement">
            <summary>
            The SvgPolylineElement interface corresponds to the 'polyline' element
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgRectElement">
            <summary>
            The SvgRectElement interface corresponds to the 'rect' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.X">
            <summary>
            Corresponds to attribute x on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Y">
            <summary>
            Corresponds to attribute y on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Rx">
            <summary>
            Corresponds to attribute rx on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Ry">
            <summary>
            Corresponds to attribute ry on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Width">
            <summary>
            Corresponds to attribute width on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Height">
            <summary>
            Corresponds to attribute height on the given 'rect' element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedPreserveAspectRatio">
            <summary>
            Used for attributes of type SvgPreserveAspectRatio which can be 
            animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedPreserveAspectRatio.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedPreserveAspectRatio.AnimVal">
            <summary>
                If the given attribute or property is being animated, contains the current animated value of the attribute or property, and both the object itself and its contents are readonly. If the given attribute or property is not currently being animated, contains the same
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedTransformList">
            <summary>
            Used for the various attributes which specify a set of transformations, such as the 
            transform attribute which is available for many of Svg's elements, and which can be animated.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgMatrix">
            <summary>
            Interface for matrix operations used within the SVG DOM
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPoint">
            <summary>
            Many of the SVG DOM interfaces refer to objects of class SvgPoint.
            An SvgPoint is an (x,y) coordinate pair. 
            </summary>
            <remarks>
            When used in matrix operations, an SvgPoint is treated as a vector of the form:
            	[x]
            	[y]
            	[1]
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPointList">
            <summary>
            This interface defines a list of SvgPoint objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPreserveAspectRatio">
            <summary>
            The SvgPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, 
            which is available for some of Svg's elements. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgPreserveAspectRatio.Align">
            <summary>
            The type of the alignment value as specified by one of the constants specified above.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgPreserveAspectRatio.MeetOrSlice">
            <summary>
            The type of the meet-or-slice value as specified by one of the constants specified above.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTransform">
            <summary>
            SvgTransform is the interface for one of the component transformations within a SvgTransformList; 
            thus, a SvgTransform object corresponds to a single component (e.g., "scale(..)" or "matrix(...)") 
            within a transform attribute specification. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTransformList">
            <summary>
            This interface defines a list of SvgTransform objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgDefsElement">
            <summary>
            The SvgDefsElement interface corresponds to the 'defs' element.  
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgDescElement">
            <summary>
            The SvgDescElement interface corresponds to the 'desc' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgDocument">
            <summary>
            The root object in the document object hierarchy of an Svg document.
            </summary>
            <remarks>
            <para>
            When an 'svg'  element is embedded inline as a component of a
            document from another namespace, such as when an 'svg' element is
            embedded inline within an XHTML document
            [<see href="http://www.w3.org/TR/SVG/refs.html#ref-XHTML">XHTML</see>],
            then an
            <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object will not exist;
            instead, the root object in the
            document object hierarchy will be a Document object of a different
            type, such as an HTMLDocument object.
            </para>
            <para>
            However, an <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object will
            indeed exist when the root
            element of the XML document hierarchy is an 'svg' element, such as
            when viewing a stand-alone SVG file (i.e., a file with MIME type
            "image/svg+xml"). In this case, the
            <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object will be the
            root object of the document object model hierarchy.
            </para>
            <para>
            In the case where an SVG document is embedded by reference, such as
            when an XHTML document has an 'object' element whose href attribute
            references an SVG document (i.e., a document whose MIME type is
            "image/svg+xml" and whose root element is thus an 'svg' element),
            there will exist two distinct DOM hierarchies. The first DOM hierarchy
            will be for the referencing document (e.g., an XHTML document). The
            second DOM hierarchy will be for the referenced SVG document. In this
            second DOM hierarchy, the root object of the document object model
            hierarchy is an <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object.
            </para>
            <para>
            The <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> interface contains a
            similar list of attributes and
            methods to the HTMLDocument interface described in the
            <see href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html">Document
            Object Model (HTML) Level 1</see> chapter of the
            [<see href="http://www.w3.org/TR/SVG/refs.html#ref-DOM1">DOM1</see>] specification.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Title">
            <summary>
            The title of a document as specified by the title sub-element of
            the 'svg' root element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Referrer">
            <summary>
            Returns the URI of the page that linked to this page. The value
            is an empty string if the user navigated to the page directly
            (not through a link, but, for example, via a bookmark).
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Domain">
            <summary>
            The domain name of the server that served the document, or a
            null string if the server cannot be identified by a domain name.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Url">
            <summary>
            The complete URI of the document.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.RootElement">
            <summary>
            The root 'svg' element in the document hierarchy.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Window">
            <summary>
            The window object of the Svg document.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgElementInstance">
            <summary>
            For each 'use' element, the Svg DOM maintains a shadow tree (the "instance tree") of 
            objects of type SvgElementInstance
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgElementInstanceList">
            <summary>
            The SvgElementInstanceList interface provides the abstraction of an ordered collection of 
            SvgElementInstance objects, without defining or constraining how this collection is implemented.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgGElement">
            <summary>
            The SvgGElement interface corresponds to the 'g' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgImageElement">
            <summary>
            The SvgRectElement interface corresponds to the 'image' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgImageElement.X">
            <summary>
            Corresponds to attribute x on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgImageElement.Y">
            <summary>
            Corresponds to attribute y on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgImageElement.Width">
            <summary>
            Corresponds to attribute width on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgImageElement.Height">
            <summary>
            Corresponds to attribute height on the given 'rect' element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgSvgElement">
            <summary>
            A key interface definition is the
            <see cref="T:SharpVectors.Dom.Svg.ISvgSvgElement">ISvgSvgElement</see> interface, which is
            the interface that corresponds to the 'svg' element.
            </summary>
            <remarks>
            This interface
            contains various miscellaneous commonly-used utility methods, such
            as matrix operations and the ability to control the time of redraw
            on visual rendering devices.
            <see cref="T:SharpVectors.Dom.Svg.ISvgSvgElement">ISvgSvgElement</see> extends ViewCSS and
            DocumentCSS to provide access to
            the computed values of properties and the override style sheet as
            described in DOM2.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.X">
            <summary>
            Corresponds to attribute x on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.Y">
            <summary>
            Corresponds to attribute y on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.Width">
            <summary>
            Corresponds to attribute width on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.Height">
            <summary>
            Corresponds to attribute height on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.ContentScriptType">
            <summary>
            Corresponds to attribute contentScriptType on the given 'svg'
            element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.ContentStyleType">
            <summary>
            Corresponds to attribute contentStyleType on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.Viewport">
            <summary>
            The position and size of the viewport (implicit or explicit) that
            corresponds to this 'svg' element.
            </summary>
            <remarks>
            <para>
            When the user agent is
            actually rendering the content, then the position and size values
            represent the actual values when rendering. The position and size
            values are unitless values in the coordinate system of the parent
            element. If no parent element exists (i.e., 'svg' element
            represents the root of the document tree), if this SVG document
            is embedded as part of another document (e.g., via the HTML
            'object' element), then the position and size are unitless values
            in the coordinate system of the parent document. (If the parent
            uses CSS or XSL layout, then unitless values represent pixel units
            for the current CSS or XSL viewport, as described in the CSS2
            specification.) If the parent element does not have a coordinate
            system, then the user agent should provide reasonable default
            values for this attribute.
            </para>
            <para>
            The object itself and its contents are both readonly.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.PixelUnitToMillimeterX">
            <summary>
            Size of a pixel unit (as defined by CSS2) along the x-axis of the
            viewport, which represents a unit somewhere in the range of 70dpi
            to 120dpi, and, on systems that support this, might actually match
            the characteristics of the target medium.
            </summary>
            <remarks>
            On systems where it is impossible to know the size of a pixel, a
            suitable default pixel size is provided.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.PixelUnitToMillimeterY">
            <summary>
            Corresponding size of a pixel unit along the y-axis of the viewport.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.ScreenPixelToMillimeterX">
            <summary>
            User interface (UI) events in DOM Level 2 indicate the screen
            positions at which the given UI event occurred. When the user
            agent actually knows the physical size of a "screen unit", this
            attribute will express that information; otherwise, user agents
            will provide a suitable default value such as .28mm.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.ScreenPixelToMillimeterY">
            <summary>
            Corresponding size of a screen pixel along the y-axis of the
            viewport.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.UseCurrentView">
            <summary>
            The initial view (i.e., before magnification and panning) of the
            current innermost SVG document fragment can be either the
            "standard" view (i.e., based on attributes on the 'svg' element
            such as fitBoxToViewport) or to a "custom" view (i.e., a
            hyperlink into a particular 'view' or other element - see
            <see href="http://www.w3.org/TR/SVG/linking.html#LinksIntoSVG"
            >Linking into SVG content: URI fragments and SVG views</see>). If
            the initial view is the "standard" view, then this attribute is
            false. If the initial view is a "custom" view, then this
            attribute is true.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.CurrentView">
            <summary>
            The definition of the initial view (i.e., before magnification
            and panning) of the current innermost SVG document fragment.
            </summary>
            <remarks>
            The meaning depends on the situation:
            <list type="bullet">
             <item><description>
             If the initial view was a "standard" view, then:
              <list type="bullet">
               <item><description>
               the values for viewBox, preserveAspectRatio and zoomAndPan
               within currentView will match the values for the corresponding
               DOM attributes that are on SVGSVGElement directly
               </description></item>
               <item><description>
               the values for transform and viewTarget within currentView will
               be null
               </description></item>
              </list>
             </description></item>
             <item><description>
             If the initial view was a link into a 'view' element, then:
               <list type="bullet">
                <item><description>
                the values for viewBox, preserveAspectRatio and zoomAndPan within
                currentView will correspond to the corresponding attributes for
                the given 'view' element
                </description></item>
                <item><description>
                the values for transform and viewTarget within currentView will
                be null
                </description></item>
               </list>
             </description></item>
             <item><description>
             If the initial view was a link into another element (i.e., other
             than a 'view'), then:
              <list type="bullet">
               <item><description>
               the values for viewBox, preserveAspectRatio and zoomAndPan
               within currentView will match the values for the corresponding
               DOM attributes that are on SVGSVGElement directly for the
               closest ancestor 'svg' element
               </description></item>
               <item><description>
               the values for transform within currentView will be null
               </description></item>
               <item><description>
               the viewTarget within currentView will represent the target of
               the link
               </description></item>
              </list>
             </description></item>
             <item><description>
             If the initial view was a link into the SVG document fragment
             using an SVG view specification fragment identifier (i.e.,
             #svgView(...)), then:
              <list type="bullet">
                <item><description>
                the values for viewBox, preserveAspectRatio, zoomAndPan,
                transform and viewTarget within currentView will correspond
                to the values from the SVG view specification fragment
                identifier
                </description></item>
              </list>
             </description></item>
            </list>
            The object itself and its contents are both readonly.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.CurrentScale">
            <summary>
            This attribute indicates the current scale factor relative to
            the initial view to take into account user magnification and
            panning operations, as described under <see
            href="http://www.w3.org/TR/SVG/interact.html#ZoomAndPanAttribute"
            >Magnification and panning</see>.
            </summary>
            <remarks>
            DOM attributes currentScale and currentTranslate are
            equivalent to the 2x3 matrix [a b c d e f] = [currentScale 0
            0 currentScale currentTranslate.x currentTranslate.y]. If
            "magnification" is enabled (i.e., zoomAndPan="magnify"), then
            the effect is as if an extra transformation were placed at the
            outermost level on the SVG document fragment (i.e., outside the
            outermost 'svg' element).
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.CurrentTranslate">
            <summary>
            The corresponding translation factor that takes into account
            user "magnification".
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.SuspendRedraw(System.Int32)">
            <summary>
            Takes a time-out value which indicates that redraw shall not
            occur until certain conditions are met.
            </summary>
            <remarks>
            Takes a time-out value which indicates that redraw shall not
            occur until: (a) the corresponding unsuspendRedraw(
            suspend_handle_id) call has been made, (b) an
            unsuspendRedrawAll() call has been made, or (c) its timer
            has timed out. In environments that do not support
            interactivity (e.g., print media), then redraw shall not be
            suspended. suspend_handle_id = suspendRedraw(
            max_wait_milliseconds) and unsuspendRedraw(suspend_handle_id)
            must be packaged as balanced pairs. When you want to suspend
            redraw actions as a collection of SVG DOM changes occur,
            then precede the changes to the SVG DOM with a method call
            similar to suspend_handle_id = suspendRedraw(
            max_wait_milliseconds) and follow the changes with a method
            call similar to unsuspendRedraw(suspend_handle_id). Note
            that multiple suspendRedraw calls can be used at once and
            that each such method call is treated independently of the
            other suspendRedraw method calls.
            </remarks>
            <param name="max_wait_milliseconds">
            The amount of time in milliseconds to hold off before redrawing
            the device. Values greater than 60 seconds will be truncated down
            to 60 seconds.
            </param>
            <returns>
            A number which acts as a unique identifier for the given
            suspendRedraw() call. This value must be passed as the parameter
            to the corresponding unsuspendRedraw() method call.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.UnsuspendRedraw(System.Int32)">
            <summary>
            Cancels a specified suspendRedraw() by providing a unique
            suspend_handle_id.
            </summary>
            <param name="suspend_handle_id">
            A number which acts as a unique identifier for the desired
            suspendRedraw() call. The number supplied must be a value
            returned from a previous call to suspendRedraw()
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.UnsuspendRedrawAll">
            <summary>
            Cancels all currently active suspendRedraw() method calls.
            been cancelled.
            </summary>
            <remarks>
            This method is most useful at the very end of a set of SVG
            DOM calls to ensure that all pending suspendRedraw() method
            calls have been cancelled.
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.ForceRedraw">
            <summary>
            In rendering environments supporting interactivity, forces the
            user agent to immediately redraw all regions of the viewport
            that require updating.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.PauseAnimations">
            <summary>
            Suspends (i.e., pauses) all currently running animations that are
            defined within the SVG document fragment corresponding to this
            'svg' element, causing the animation clock corresponding to this
            document fragment to stand still until it is unpaused.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.UnpauseAnimations">
            <summary>
            Unsuspends (i.e., unpauses) currently running animations that are
            defined within the SVG document fragment, causing the animation
            clock to continue from the time at which it was suspended.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.AnimationsPaused">
            <summary>
            Returns true if this SVG document fragment is in a paused state.
            </summary>
            <returns>
            Boolean indicating whether this SVG document fragment is in a
            paused state.
            </returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.CurrentTime">
            <summary>
            The current time in seconds relative to the start time
            for the current SVG document fragment.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.GetIntersectionList(SharpVectors.Dom.Svg.ISvgRect,SharpVectors.Dom.Svg.ISvgElement)">
            <summary>
            Returns the list of graphics elements whose rendered content
            intersects the supplied rectangle, honoring the 'pointer-events'
            property value on each candidate graphics element.
            </summary>
            <param name="rect">
            The test rectangle. The values are in the initial coordinate
            system for the current 'svg' element.
            </param>
            <param name="referenceElement">
            If not null, then only return elements whose drawing order has
            them below the given reference element.
            </param>
            <returns>
            A list of Elements whose content intersects the supplied
            rectangle.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.GetEnclosureList(SharpVectors.Dom.Svg.ISvgRect,SharpVectors.Dom.Svg.ISvgElement)">
            <summary>
            Returns the list of graphics elements whose rendered content is
            entirely contained within the supplied rectangle, honoring the
            'pointer-events' property value on each candidate graphics
            element.
            </summary>
            <param name="rect">
            The test rectangle. The values are in the initial coordinate
            system for the current 'svg' element.
            </param>
            <param name="referenceElement">
            If not null, then only return elements whose drawing order has
            them below the given reference element.
            </param>
            <returns>
            A list of Elements whose content is enclosed by the supplied
            rectangle.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CheckIntersection(SharpVectors.Dom.Svg.ISvgElement,SharpVectors.Dom.Svg.ISvgRect)">
            <summary>
            Returns true if the rendered content of the given element
            intersects the supplied rectangle, honoring the 'pointer-events'
            property value on each candidate graphics element.
            </summary>
            <param name="element">
            The element on which to perform the given test.
            </param>
            <param name="rect">
            The test rectangle. The values are in the initial coordinate
            system for the current 'svg' element.
            </param>
            <returns>
            True or false, depending on whether the given element intersects
            the supplied rectangle.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CheckEnclosure(SharpVectors.Dom.Svg.ISvgElement,SharpVectors.Dom.Svg.ISvgRect)">
            <summary>
            Returns true if the rendered content of the given element is
            entirely contained within the supplied rectangle, honoring the
            'pointer-events' property value on each candidate graphics
            element.
            </summary>
            <param name="element">
            The element on which to perform the given test.
            </param>
            <param name="rect">
            The test rectangle. The values are in the initial coordinate
            system for the current 'svg' element.
            </param>
            <returns>
            True or false, depending on whether the given element is
            enclosed by the supplied rectangle.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.DeselectAll">
            <summary>
            Unselects any selected objects, including any selections of text
            strings and type-in bars.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgNumber">
            <summary>
            Creates an SVGNumber object outside of any document trees. The
            object is initialized to a value of zero.
            </summary>
            <returns>
            An SVGNumber object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgLength">
            <summary>
            Creates an SVGLength object outside of any document trees. The
            object is initialized to the value of 0 user units.
            </summary>
            <returns>
            An SVGLength object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgAngle">
            <summary>
            Creates an SVGAngle object outside of any document trees. The
            object is initialized to the value 0 degrees (unitless).
            </summary>
            <returns>
            An SVGAngle object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgPoint">
            <summary>
            Creates an SVGPoint object outside of any document trees. The
            object is initialized to the point (0,0) in the user coordinate
            system.
            </summary>
            <returns>
            An SVGPoint object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgMatrix">
            <summary>
            Creates an SVGMatrix object outside of any document trees. The
            object is initialized to the identity matrix.
            </summary>
            <returns>
            An SVGMatrix object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgRect">
            <summary>
            Creates an SVGRect object outside of any document trees. The
            object is initialized such that all values are set to 0 user
            units.
            </summary>
            <returns>
            An SVGRect object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgTransform">
            <summary>
            Creates an SVGTransform object outside of any document trees. The
            object is initialized to an identity matrix transform
            (SVG_TRANSFORM_MATRIX).
            </summary>
            <returns>
            An SVGTransform object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgTransformFromMatrix(SharpVectors.Dom.Svg.ISvgMatrix)">
            <summary>
            Creates an SVGTransform object outside of any document trees.
            The object is initialized to the given matrix transform (i.e.,
            SVG_TRANSFORM_MATRIX).
            </summary>
            <param name="matrix">
            The transform matrix.
            </param>
            <returns>
            An SVGTransform object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.GetElementById(System.String)">
            <summary>
            Searches this SVG document fragment (i.e., the search is
            restricted to a subset of the document tree) for an Element whose
            id is given by elementId.
            </summary>
            <remarks>
            If an Element is found, that Element is
            returned. If no such element exists, returns null. Behavior is
            not defined if more than one element has this id.
            </remarks>
            <param name="elementId">
            The unique id value for an element.
            </param>
            <returns>
            The matching element.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgSwitchElement">
            <summary>
            The SvgSwitchElement interface corresponds to the 'switch' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTitleElement">
            <summary>
            The SvgTitleElement interface corresponds to the 'title' element.  
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgUseElement">
            <summary>
            The SvgUseElement interface corresponds to the 'use' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgComponentTransferFunctionElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEBlendElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEColorMatrixElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEComponentTransferElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFECompositeElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEConvolveMatrixElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEDiffuseLightingElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEDisplacementMapElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEDistantLightElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFloodElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFuncAElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFuncBElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFuncGElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFuncRElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEGaussianBlurElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEImageElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEMergeElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEMergeNodeElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEMorphologyElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEOffsetElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEPointLightElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFESpecularLightingElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFESpotLightElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFETileElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFETurbulenceElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFilterElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFilterPrimitiveStandardAttributes">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgGradientElement">
            <summary>
            The SvgGradientElement interface is a base interface used by SvgLinearGradientElement 
            and SvgRadialGradientElement. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLinearGradientElement">
            <summary>
            The SvgLinearGradientElement interface corresponds to the 'linearGradient' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgRadialGradientElement">
            <summary>
            The ISvgRadialGradientElement interface corresponds to the 'radialGradient' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgStopElement">
            <summary>
            The SvgStopElement interface corresponds to the 'stop' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgRenderer">
            <summary>
            Defines the interface required by a renderer to render the SVG DOM.
            </summary>
            <remarks>
            The <see cref="T:SharpVectors.Dom.Svg.ISvgRenderer">ISvgRenderer</see> is used to render
            a <see cref="T:SharpVectors.Dom.Svg.ISvgElement">ISvgElement</see> object onto a bitmap.
            During the rendering process, it will also generate
            <see cref="!:RenderingNode">RenderingNode</see> objects for each
            <see cref="T:System.Xml.XmlElement">XmlElement</see> object in the DOM tree to
            assist in the rendering.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRenderer.Window">
            <summary>
            The window that is being rendered to.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgRenderer.Render(SharpVectors.Dom.Svg.ISvgElement)">
            <summary>
            Renders an <see cref="T:SharpVectors.Dom.Svg.ISvgElement">SvgElement</see> object onto a
            bitmap and returns that bitmap.
            </summary>
            <param name="node">
            The SvgElement object to be rendered.
            </param>
            <returns>
            A bitmap with <c>node</c> rendered onto it.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgRenderer.Render(SharpVectors.Dom.Svg.ISvgDocument)">
            <summary>
            Renders an <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">SvgDocument</see> object onto
            a bitmap and returns that bitmap.
            </summary>
            <param name="node">
            The SvgDocument object to be rendered.
            </param>
            <returns>
            A bitmap with <c>node</c> rendered onto it.
            </returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRenderer.InvalidRect">
            <summary>
            Controls the rendering of the document.  
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgRenderer.InvalidateRect(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            Allows you to establish or add to the existing invalidation rectangle
            </summary>
            <param name="rect"></param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRenderer.OnRender">
            <summary>
            Event Delegate to report when the SVG renderer does it's work.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPaint">
            <summary>
            The SvgPaint interface corresponds to basic type paint and represents the values of 
            properties 'fill' and 'stroke'. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerOrient.Unknown">
            <summary>
            The marker orientation is not one of predefined types. It is invalid to attempt 
            to define a new value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerOrient.Auto">
            <summary>
            Attribute orient has value 'auto'.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerOrient.Angle">
            <summary>
            Attribute orient has an angle value.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerOrient.AutoStartReverse">
            <summary>
            Attribute orient has value 'auto-start-reverse'.
            </summary>
            <remarks>
            <para>
            If placed by marker-start, the marker is oriented 180° different from the orientation 
            that would be used if 'auto' where specified. For all other markers, 'auto-start-reverse' 
            means the same as 'auto'.
            </para>
            <para>
            This allows a single arrowhead marker to be defined that can be used for both the start 
            and end of a path, i.e. which points outwards from both ends.
            </para>
            </remarks>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerUnit.Unknown">
            <summary>
            The marker unit type is not one of predefined types. It is invalid to attempt to define 
            a new value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerUnit.UserSpaceOnUse">
            <summary>
            The value of attribute markerUnits is 'userSpaceOnUse'.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerUnit.StrokeWidth">
            <summary>
            The value of attribute markerUnits is 'strokeWidth'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedPathData">
            <summary>
            The SvgAnimatedPathData interface supports elements which have a 'd' attribute which 
            holds Svg path data, and supports the ability to animate that attribute. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathElement">
            <summary>
            The SvgPathElement interface corresponds to the 'path' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSeg">
            <summary>
            The SvgPathSeg interface is a base interface that corresponds to a single command within 
            a path data specification. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegArcAbs">
            <summary>
            The SvgPathSegArcAbs interface corresponds to an "absolute arcto" (A) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegArcRel">
            <summary>
            The SvgPathSegArcRel interface corresponds to a "relative arcto" (a) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegClosePath">
            <summary>
            The SvgPathSegClosePath interface corresponds to a "closepath" (z) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicAbs">
            <summary>
            The SvgPathSegCurvetoCubicAbs interface corresponds to an 
            "absolute cubic Bezier curveto" (C) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicRel">
            <summary>
            The SvgPathSegCurvetoCubicRel interface corresponds to a "relative cubic Bezier curveto" 
            (c) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicSmoothAbs">
            <summary>
            The SvgPathSegCurvetoCubicSmoothAbs interface corresponds to an "absolute smooth cubic curveto" 
            (S) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicSmoothRel">
            <summary>
            The SvgPathSegCurvetoCubicSmoothRel interface corresponds to a "relative smooth cubic curveto" 
            (s) path data command.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticAbs">
            <summary>
            The SvgPathSegCurvetoQuadraticAbs interface corresponds to an "absolute quadratic Bezier curveto" 
            (Q) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticRel">
            <summary>
            The SvgPathSegCurvetoCubicRel interface corresponds to a "relative cubic Bezier curveto" 
            (c) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticSmoothAbs">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothAbs interface corresponds to an 
            "absolute smooth quadratic curveto" (T) path data command.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticSmoothRel">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothRel interface corresponds to a 
            "relative smooth quadratic curveto" (t) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoAbs">
            <summary>
            The SvgPathSegLinetoAbs interface corresponds to an "absolute lineto" (L) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoHorizontalAbs">
            <summary>
            The SvgPathSegLinetoHorizontalAbs interface corresponds to an 
            "absolute horizontal lineto" (H) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoHorizontalRel">
            <summary>
            The SvgPathSegLinetoHorizontalRel interface corresponds to a 
            "relative horizontal lineto" (h) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoRel">
            <summary>
            The SvgPathSegLinetoRel interface corresponds to an "relative lineto" (l) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoVerticalAbs">
            <summary>
            The SvgPathSegLinetoVerticalAbs interface corresponds to an "absolute vertical lineto" (V) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoVerticalRel">
            <summary>
            The SvgPathSegLinetoVerticalRel interface corresponds to a "relative vertical lineto" (v) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegList">
            <summary>
            This interface defines a list of SvgPathSeg objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegMovetoAbs">
            <summary>
            The SvgPathSegMovetoAbs interface corresponds to an "absolute moveto" (M) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegMovetoRel">
            <summary>
            The SvgPathSegMovetoRel interface corresponds to an "relative moveto" (m) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgScriptElement">
            <summary>
            The ISvgScriptElement interface corresponds to the 'script' element. 
            </summary>
            <remarks>
            <para>A 'script' element is equivalent to the 'script' element in HTML and thus is the place for scripts.</para>
            <para>Any functions defined within any 'script' element have a 'global' scope across the entire current document.</para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgScriptElement.Type">
            <summary>
            Gets or sets a value corresponding to the attribute 'type' on the given 'script' element.
            </summary>
            <value>A string specifying the script type.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgScriptElement.CrossOrigin">
            <summary>
            Gets or sets a value corresponding to the attribute 'crossorigin' on the given 'script' element.
            </summary>
            <value>An enumeration specifying the CORS (Cross-Origin Resource Sharing) setting attributes. 
            Possible values are <c>anonymous</c>, <c>use-credentials</c> and empty string.</value>
            <remarks>This is introduced in <c>SVG 2</c>.</remarks>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes"/>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement">
            <summary>
            The ISvgAltGlyphDefElement interface corresponds to the 'altGlyphDef' element.
            </summary>
            <remarks>
            *Content model:* Either
            <list type="bullet">
            <item><term>one or more 'glyphRef' elements, or</term>
            <description>In the simplest case, an 'altGlyphDef' contains one or more 'glyphRef' elements. 
            Each 'glyphRef' element references a single glyph within a particular font.
            </description>
            </item>
            <item><term>one or more 'altGlyphItem' elements.</term>
            <description>In the more complex case, an 'altGlyphDef' contains one or more 'altGlyphItem' elements. 
            Each 'altGlyphItem' represents a candidate set of substitute glyphs. Each 'altGlyphItem' contains 
            one or more 'glyphRef' elements. Each 'glyphRef' element references a single glyph within a particular font. 
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.IsSimple">
            <summary>
            Gets a value indicating whether this is a simple content model.
            </summary>
            <value>
            Returns <see langword="true"/> if this element defines a simple content model that contains only 'glyphRef'
            elements, otherwise returns <see langword="false"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.GetGlyphRef(System.String)">
            <summary>
            Gets the <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> with the specified name or ID.
            </summary>
            <param name="name">The name or ID of the required <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/>.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> specifying the 'glyphRef' element of the specifiied name or ID.
            <para>
            This will always return <see langword="null"/>, if the <see cref="P:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.IsSimple"/> is <see langword="false"/>.
            </para>
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.GetGlyphItem(System.String)">
            <summary>
            Gets the <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/> with the specified name or ID.
            </summary>
            <param name="name">The name or ID of the required <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/>.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/> specifying the 'altGlyphItem' element of the specifiied name or ID.
            <para>
            This will always return <see langword="null"/>, if the <see cref="P:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.IsSimple"/> is <see langword="true"/>.
            </para>
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAltGlyphElement">
            <summary>
            The ISvgAltGlyphElement interface corresponds to the 'altGlyph' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAltGlyphElement.GlyphRef">
            <summary>
            The glyph identifier, this corresponds to attribute 'glyphRef attribute' on the given element.
            </summary>
            <value>The glyph identifier, the format of which is dependent on the <see cref="P:SharpVectors.Dom.Svg.ISvgAltGlyphElement.Format"/> of the given font. </value>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAltGlyphElement.Format">
            <summary>
            The format of the given font. This corresponds to attribute 'format' on the given element.
            </summary>
            <value>The format of the given font.</value>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement">
            <summary>
            The ISvgAltGlyphItemElement interface corresponds to the 'altGlyphItem' element.
            </summary>
            <remarks>
            <para>*Content model:* One or more 'glyphRef' elements.</para>
            <para>The 'altGlyphItem' element defines a candidate set of possible glyph substitutions. 
            The first 'altGlyphItem' element whose referenced glyphs are all available is chosen. 
            Its glyphs are rendered instead of the character(s) that are inside of the referencing 'altGlyph' element.</para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement.GetGlyphRef(System.String)">
            <summary>
            Gets the <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> with the specified name or ID.
            </summary>
            <param name="name">The name or ID of the required <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/>.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> specifying the 'glyphRef' element of the specifiied name or ID.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontElement">
            <summary>
            The ISvgFontElement interface corresponds to the 'font' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceElement">
            <summary>
            The ISvgFontFaceElement interface corresponds to the 'font-face' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceFormatElement">
            <summary>
            The ISvgFontFaceFormatElement interface corresponds to the 'font-face-format' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceNameElement">
            <summary>
            The ISvgFontFaceNameElement interface corresponds to the 'font-face-name' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceSrcElement">
            <summary>
            The ISvgFontFaceSrcElement interface corresponds to the 'font-face-src' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceUriElement">
            <summary>
            The ISvgFontFaceUriElement interface corresponds to the 'font-face-uri' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgGlyphElement">
            <summary>
            The ISvgGlyphElement interface corresponds to the 'glyph' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement">
            <summary>
            The ISvgGlyphRefElement interface corresponds to the 'glyphRef' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.GlyphRef">
            <summary>
            The glyph identifier, this corresponds to attribute 'glyphRef attribute' on the given element.
            </summary>
            <value>The glyph identifier, the format of which is dependent on the <see cref="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Format"/> of the given font. </value>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Format">
            <summary>
            The format of the given font. This corresponds to attribute 'format' on the given element.
            </summary>
            <value>The format of the given font.</value>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.X">
            <summary>
            Corresponds to attribute 'x' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Y">
            <summary>
            Corresponds to attribute 'y' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Dx">
            <summary>
            Corresponds to attribute 'dx' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Dy">
            <summary>
            Corresponds to attribute 'dy' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgHKernElement">
            <summary>
            The ISvgHKernElement interface corresponds to the 'hkern' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgMissingGlyphElement">
            <summary>
            The ISvgMissingGlyphElement interface corresponds to the 'missing-glyph' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTextContentElement">
            <summary>
            The ISvgTextContentElement interface is inherited by various text-related interfaces, such as 
            <see cref="T:SharpVectors.Dom.Svg.ISvgTextElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgTSpanElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgTRefElement"/>, 
            <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphElement"/> and <see cref="T:SharpVectors.Dom.Svg.ISvgTextPathElement"/>. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTextElement">
            <summary>
            The SvgTextElement interface corresponds to the 'text' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTextPathElement">
            <summary>
            The SvgTextPathElement interface corresponds to the 'textPath' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTextPositioningElement">
            <summary>
            The SvgTextPositioningElement interface is inherited by text-related interfaces: SvgTextElement, 
            SvgTSpanElement, SvgTRefElement and SvgAltGlyphElement. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTRefElement">
            <summary>
            The SvgTRefElement interface corresponds to the 'tref' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTSpanElement">
            <summary>
            The SvgTSpanElement interface corresponds to the 'tspan' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTransformOrder">
            <summary>
            Specifies the order for matrix transform operations.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTransformOrder.Prepend">
            <summary>
            The new operation is applied after the old operation.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTransformOrder.Append">
            <summary>
            The new operation is applied before the old operation.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgVKernElement">
            <summary>
            The ISvgVKernElement interface corresponds to the 'vkern' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.ITimeEvent">
            <summary>
            This interface, defined in SMIL Animation: Supported interfaces, provides specific 
            contextual information associated with Time events.
            </summary>
            <remarks>
            <para>The different types of events that can occur are:</para>
            <para>
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.ITimeEvent.View">
            <summary>
            The view attribute identifies the <see cref="T:SharpVectors.Dom.Views.IAbstractView"/> from which the event was generated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.ITimeEvent.Detail">
            <summary>
            Specifies some detail information about the Event, depending on the type of the event. 
            For this event type, indicates the repeat number for the animation.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.ITimeEvent.InitTimeEvent(System.String,SharpVectors.Dom.Views.IAbstractView,System.Int64)">
            <summary>
            This method is used to initialize the value of a <see cref="T:SharpVectors.Dom.Events.ITimeEvent"/> created through 
            the <see cref="T:SharpVectors.Dom.Events.IDocumentEvent"/> interface. This method may only be called before the 
            <see cref="T:SharpVectors.Dom.Events.ITimeEvent"/> has been dispatched via the dispatchEvent method, though it may 
            be called multiple times during that phase if necessary. If called multiple times, the 
            final invocation takes precedence.
            </summary>
            <param name="typeArg">Specifies the event type.</param>
            <param name="viewArg">Specifies the event's <see cref="T:SharpVectors.Dom.Views.IAbstractView"/>.</param>
            <param name="detailArg">Specifies the event's detail.</param>
        </member>
        <member name="T:SharpVectors.Dom.Events.AttrChangeType">
            <summary>
            An integer indicating in which way the attribute was changed.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.None">
            <summary>
            No attribute was modified, added nor removed.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.Modification">
            <summary>
            The attribute was modified in place.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.Addition">
            <summary>
            The attribute was just added.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.Removal">
            <summary>
            The attribute was just removed.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventListener">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> delegate is the
            primary way for handling events.
            </summary>
            <remarks>
            <para>
            Users register their event listener on an
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>. The users should also
            remove their <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> from its
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> after they have completed
            using the listener.
            </para>
            <para>
            Copying a <see cref="T:SharpVectors.Dom.INode">INode</see> does not copy the event
            listeners attached to it. Event listeners must be attached to the
            newly created <see cref="T:SharpVectors.Dom.INode">INode</see> afterwards if so desired.
            Therefore, <see cref="T:SharpVectors.Dom.INode">INode</see>s are copied using
            <see cref="!:INode.CloneNode">INode.CloneNode</see> or
            <see cref="!:IRange.CloneContents">IRange.CloneContents</see>, the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>s attached to the
            source <see cref="T:SharpVectors.Dom.INode">INode</see>s are not attached to their copies.
            </para>
            <para>
            Moving a <see cref="T:SharpVectors.Dom.INode">INode</see> does not affect the event
            listeners attached to it. Therefore, when
            <see cref="T:SharpVectors.Dom.INode">INode</see>s are moved using
            <see cref="!:IDocument.AdoptNode">IDocument.AdoptNode</see>,
            <see cref="!:INode.AppendChild">INode.AppendChild</see>, or
            <see cref="!:IRange.ExtractContents">IRange.ExtractContents</see>, the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>s attached to the
            moved <see cref="T:SharpVectors.Dom.INode">INode</see>s stay attached to them.
            </para>
            </remarks>
            <paramref name="e">
            The <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> contains contextual information
            about the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event">event</see>.
            </paramref>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventException">
            <summary>
            Event operations may throw an
            <see cref="T:SharpVectors.Dom.Events.EventException">EventException</see> as specified in their
            method descriptions.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.EventException.Code">
            <summary>
            An integer indicating the type of error generated.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventPhase">
            <summary>
            An integer indicating which phase of the event flow is being processed
            as defined in
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventPhase.CapturingPhase">
            <summary>
            (DOM Level 2)
            The current event phase is the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">capture phase</see>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventPhase.AtTarget">
            <summary>
            (DOM Level 2)
            The current event is in the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">target phase</see>,
            i.e. it is being evaluated at the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event target</see>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventPhase.BubblingPhase">
            <summary>
            (DOM Level 2)
            The current event phase is the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-bubbling-phase">bubbling phase</see>.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.ICustomEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see> interface gives access
            to the attributes
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see>.
            </summary>
            <remarks>
            <para>
            It is intended
            to be used by the DOM Events implementation to access the underlying
            current target and event phase while dispatching a custom
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> in the tree; it is also intended to be
            implemented, and not used, by DOM applications.
            </para>
            <para>
            The methods contained in this interface are not intended to be used by
            a DOM application, especially during the dispatch on the Event object.
            Changing the current target or the current phase may conduct into
            unpredictable results of the event flow. The DOM Events implementation
            should ensure that both methods return the appropriate current target
            and phase before invoking each event listener on the current target to
            protect DOM applications from malicious event listeners.
            </para>
            <para>
            Note: If this interface is supported by the event object,
            <see cref="P:SharpVectors.Dom.Events.IEvent.IsCustom">IEvent.IsCustom</see> must return <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.ICustomEvent.IsPropagationStopped">
            <summary>
            This method will return <c>true</c> if the method
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopPropagation">IEvent.StopPropagation</see> has been called
            for this event, <c>false</c> in any other cases. 
            </summary>
            <value>
            <c>true</c> if the event propagation has been stopped in the
            current group.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Events.ICustomEvent.IsImmediatePropagationStopped">
            <summary>
            The
            <see cref="P:SharpVectors.Dom.Events.ICustomEvent.IsImmediatePropagationStopped">IsImmediatePropagationStopped</see>
            method is used by the DOM Events implementation to know if the
            method
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopImmediatePropagation">IEvent.StopImmediatePropagation</see>
            has been called for this event. It returns <c>true</c> if the
            method has been called, <c>false</c> otherwise. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.ICustomEvent.SetDispatchState(SharpVectors.Dom.Events.IEventTarget,System.UInt16)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.ICustomEvent.SetDispatchState(SharpVectors.Dom.Events.IEventTarget,System.UInt16)">SetDispatchState</see> method is
            used by the DOM Events implementation to set the values of
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see>.
            </summary>
            <remarks>
            It also reset the states of
            <see cref="P:SharpVectors.Dom.Events.ICustomEvent.IsPropagationStopped">IsPropagationStopped</see> and
            <see cref="P:SharpVectors.Dom.Events.ICustomEvent.IsImmediatePropagationStopped">IsImmediatePropagationStopped</see>.
            </remarks>
            <param name="target">
            Specifies the new value for the
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see>
            attribute.
            </param>
            <param name="phase">
            Specifies the new value for the
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see> attribute.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IDocumentEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface provides a mechanism by which the user 
            can create an <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> object of a type supported by the implementation. 
            It is expected that the <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface will be implemented 
            on the same object which implements the <see cref="T:SharpVectors.Dom.IDocument">IDocument</see> interface in an implementation
            which supports the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> model.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">CreateEvent</see> method is used in
            creating <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>s when it is either
            inconvenient or unnecessary for the user to create an
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> themselves.
            </summary>
            <remarks>
            <para>
            In cases where the implementation provided
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> is insufficient, users may supply
            their own <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> implementations for use
            with the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method. However, the DOM implementation needs access to the
            attributes
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see> to propagate
            appropriately the event in the DOM tree. Therefore users'
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> implementations might need to
            support the <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see> interface
            for that effect.
            </para>
            <para>
            Note: For backward compatibility reason, <c>"UIEvents"</c>,
            <c>"MouseEvents"</c>, <c>"MutationEvents"</c>, and
            <c>"HTMLEvents"</c> feature names are valid values for the
            parameter <c>eventType</c> and represent respectively the
            interfaces <c>"UIEvent"</c>, <c>"MouseEvent"</c>,
            <c>"MutationEvent"</c>, and <c>"Event"</c>.
            </para>
            </remarks>
            <param name="eventType">
            The <c>eventType</c> parameter specifies the name of the DOM
            Events interface to be supported by the created event object, e.g.
            <c>"Event"</c>, <c>"MouseEvent"</c>, <c>"MutationEvent"</c> ...
            If the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> is to be dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method the appropriate event init method must be called after
            creation in order to initialize the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            values.  As an example, a user wishing to synthesize some kind of
            <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> would call
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            with the parameter <c>"UIEvent"</c>. The
            <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">IUiEvent.InitUiEventNs</see>
            method could then be called on the newly created
            <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> object to set the specific
            type of user interface event to be dispatched,
            {<c>"http://www.w3.org/2001/xml-events"</c>,
            <c>"DOMActivate"</c>} for example, and set its context
            information, e.g.
            <see cref="P:SharpVectors.Dom.Events.IUiEvent.Detail">IUiEvent.Detail</see> in this example.
            </param>
            <returns>
            The newly created event object.
            </returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            NOT_SUPPORTED_ERR: Raised if the implementation does not support
            the <see cref="T:SharpVectors.Dom.Events.IEvent">Event</see> interface requested.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Events.IDocumentEvent.CanDispatch(System.String,System.String)">
            <summary>
            Test if the implementation can generate events of a specified type.
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see> of the
            event.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> of the
            event.
            </param>
            <returns>
            <c>true</c> if the implementation can generate and dispatch this
            event type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Events.IEvent">
            <summary>
            (DOM Level 2)
            The Event interface is used to provide contextual information about an
            event to the listener processing the event.
            </summary>
            <remarks>
            An object which implements the <c>IEvent</c> interface is passed as
            the parameter to an <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>.
            More specific context information is passed to event listeners by
            deriving additional interfaces from <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>
            which contain information directly relating to the type of event
            they represent. These derived interfaces are also implemented by
            the object passed to the event listener.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Type">
            <summary>
            (DOM Level 2)
            The name must be an
            <see href="http://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-NCName">NCName</see>
            as defined in
            [<see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/references.html#Namespaces">XML Namespaces</see>]
            and is case-sensitive.
            </summary>
            <remarks>
            The character ":" (colon) should not be used in this attribute.
            If the attribute <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            is different from <c>null</c>, this attribute represents a
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-localname">local name</see>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Target">
            <summary>
            (DOM Level 2)
            Used to indicate the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event target</see>.
            </summary>
            <remarks>
            This attribute contains the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-node">target node</see>
            when used with the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">
            <summary>
            (DOM Level 2)
            Used to indicate the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>
            whose <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>s are
            currently being processed.
            </summary>
            <remarks>
            This is particularly useful during the capture and bubbling
            phases. This attribute could contain the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-node">target node</see>
            or a target ancestor when used with the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.EventPhase">
            <summary>
            (DOM Level 2)
            Used to indicate which phase of event flow is currently being
            accomplished.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Bubbles">
            <summary>
            (DOM Level 2)
            Used to indicate whether or not an event is a bubbling event.
            </summary>
            <remarks>
            If the event can bubble the value is <c>true</c>, otherwise the
            value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Cancelable">
            <summary>
            (DOM Level 2)
            Used to indicate whether or not an event can have its default
            action prevented.
            </summary>
            <remarks>
            If the default action can be prevented the value is <c>true</c>,
            otherwise the value is <c>false</c>.
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow-cancelation">Default actions and cancelable events</seealso>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.TimeStamp">
            <summary>
            (DOM Level 2)
            Used to specify the time at which the event was created.
            </summary>
            <remarks>
            Due to the fact that some systems may not provide this information
            the value of <see cref="P:SharpVectors.Dom.Events.IEvent.TimeStamp">TimeStamp</see> may be not
            available for all events. When not available, a value of <c>0</c>
            will be returned. Examples of epoch time are the time of the
            system start or 0:0:0 UTC 1st January 1970.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">
            <summary>
            (DOM Level 3 Experimental)
            The
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event at creation time, or <c>null</c> if it
            is unspecified.
            </summary>
            <remarks>
            For events initialized with a DOM Level 2 Events method, such as
            <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEvent</see>, this is always <c>null</c>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.IsCustom">
            <summary>
            (DOM Level 3 Experimental)
            This method will always return <c>false</c>, unless the event
            implements the <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see>
            interface.
            </summary>
            <value>
            <c>true</c> if the event implements the
            <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see> interface.
            <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.IsDefaultPrevented">
            <summary>
            (DOM Level 3 Experimental)
            This method will return true if the method
            <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> has been called
            for this event, <c>false</c> otherwise.
            </summary>
            <value>
            <c>true</c> if <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see>
            has been called for this event.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.StopPropagation">
            <summary>
            (DOM Level 2)
            Prevent event listeners of the same group to be triggered.
            </summary>
            <remarks>
            <para>
            This method is used to prevent event listeners of the same group
            to be triggered but its effect is differed until all event
            listeners attached on the currentTarget have been triggered.
            Once it has been called, further calls to that method
            have no additional effect. 
            </para>
            <para>
            Note: This method does not prevent the default action
            from being invoked; use preventDefault for that effect.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-propagation-and-groups">
            Event propagation and event groups
            </seealso>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.PreventDefault">
            <summary>
            (DOM Level 2)
            Signify that the event is to be canceled.
            </summary>
            <remarks>
            <para>
            If an event is cancelable, the
            <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> method is used to
            signify that the event is to be canceled, meaning any default
            action normally taken by the implementation as a result of the
            event will not occur and thus independently of event groups.
            Calling this method for a non-cancelable event has no effect.
            </para>
            <para>
            Note: This method does not stop the event propagation; use
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopPropagation">StopPropagation</see> or
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopImmediatePropagation">StopImmediatePropagation</see>
            for that effect.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow-cancelation">Default actions and cancelable events</seealso>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">
            <summary>
            (DOM Level 2)
            The <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEvent</see> method is used to initialize
            the value of an <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> created through the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> has been dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method. If the method is called several times before invoking
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>,
            only the final invocation takes precedence. If called from a
            subclass of <see cref="T:SharpVectors.Dom.Events.IEvent">Event</see> interface only the
            values specified in this method are modified, all other
            attributes are left unchanged. This method sets the
            <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> attribute to
            <c>eventTypeArg</c>, and
            <see cref="!:IEvent.LocalName">IEvent.LocalName</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            to <c>null</c>. To initialize an event with a local name and
            namespace URI, use the
            <see cref="M:SharpVectors.Dom.Events.IEvent.InitEventNs(System.String,System.String,System.Boolean,System.Boolean)">InitEventNs</see> method.
            </remarks>
            <param name="eventTypeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.InitEventNs(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            (DOM Level 3 Experimental)
            The <see>InitEventNs</see> method is used to initialize the value
            of an <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> created through the
            <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> has been dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times the event has been
            dispatched. If called multiple times the final invocation takes
            precedence. If a call to <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEventNs</see>
            is made after one of the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> derived
            interfaces' init methods has been called, only the values
            specified in the <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEventNs</see> method
            are modified, all other attributes are left unchanged.
            This method sets the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            attribute to <c>eventTypeArg</c>, and
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see> to
            <c>namespaceUriArg</c>.
            </remarks>
            <param name="namespaceUriArg">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if no namespace.
            </param>
            <param name="eventTypeArg">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-localname">local name</see>
            of the event type (see also the description of
            <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>).
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.StopImmediatePropagation">
            <summary>
            (DOM Level 3 Experimental)
            Immediately prevent event listeners of the same group
            to be triggered.
            </summary>
            <remarks>
            <para>
            This method is used to prevent event listeners of the same group
            to be triggered and, unlike
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopPropagation">StopPropagation</see> its effect is
            immediate. Once it has been called, further calls to that method
            have no additional effect.
            </para>
            <para>
            Note: This method does not prevent the default action from being
            invoked; use <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> for
            that effect.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-propagation-and-groups">Event propagation and event groups</seealso>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventExceptionCode">
            <summary>
            An integer indicating the type of error generated.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventExceptionCode.UnspecifiedEventTypeErr">
            <summary>
            If the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> was not specified
            by initializing the event before the method was called.
            Specification of the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> as
            <c>null</c> or an empty string will also trigger this exception.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventExceptionCode.DispatchRequestErr">
            <summary>
            If the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> object is already
            dispatched in the tree.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.IEventTarget">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> interface is
            implemented by all the objects which could be
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event targets</see>
            in an implementation which supports the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flows">Event flows</see>.
            </summary>
            <remarks>
            <para>
            The interface allows registration, removal or query of event
            listeners, and dispatch of events to an event target.
            </para>
            <para>
            When used with
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>,
            this interface is implemented by all
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-node">target nodes</see>
            and target ancestors, i.e. all DOM <see cref="T:SharpVectors.Dom.INode">INode</see>s of
            the tree support this interface when the implementation conforms to
            DOM Level 3 Events and, therefore, this interface can be obtained by
            using binding-specific casting methods on an instance of the
            <see cref="T:SharpVectors.Dom.INode">Node</see> interface.
            </para>
            <para>
            Invoking multiple times
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.AddEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">AddEventListener</see> or
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean,System.Object)">AddEventListenerNs</see> on the same
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> with the same parameters
            (<c>namespaceUri</c>, <c>type</c>, <c>listener</c>, and
            <c>useCapture</c>) is considered to be a no-op and thus independently
            of the event group. They do not cause the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> to be called more
            than once and do not cause a change in the triggering order. In order
            to guarantee that an event listener will be added to the event target
            for the specified event group, one needs to invoke
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListener</see> or
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListenerNs</see> first.
            </para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.AddEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">
            <summary>
            This method allows the registration of an event listener in the
            default group and, depending on the <c>useCapture</c> parameter,
            on the capture phase of the DOM event flow or its target and
            bubbling phases. <see cref="!: http://www.w3.org/TR/SVG/interact.html#SVGEvents"/>
            </summary>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> associated
            with the event for which the user is registering. 
            </param>
            <param name="listener">
            The listener parameter takes an object implemented by the user
            which implements the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> interface and
            contains the method to be called when the event occurs.
            </param>
            <param name="useCapture">
            If <c>true</c>, <c>useCapture</c> indicates that the user wishes
            to add the event listener for the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">capture phase</see>
            only, i.e. this event listener will not be triggered during the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-phase">target</see>
            and
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-bubbling-phase">bubbling phases</see>.
            If <c>false</c>, the event listener will only be triggered during the target and bubbling phases.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">
            <summary>
            This method allows the removal of event listeners from the default
            group.
            </summary>
            <remarks>
            Calling <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListener</see>
            with arguments which do not identify any currently registered
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> on the
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> has no effect. 
            </remarks>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> for which
            the user registered the event listener.
            </param>
            <param name="listener">
            The <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> to be removed.
            </param>
            <param name="useCapture">
            Specifies whether the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> being removed was
            registered for the capture phase or not. If a listener was
            registered twice, once for the capture phase and once for the
            target and bubbling phases, each must be removed separately.
            Removal of an event listener registered for the capture phase does
            not affect the same event listener registered for the target and
            bubbling phases, and vice versa.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">
            <summary>
            This method allows the dispatch of events into the
            implementation's event model.
            </summary>
            <remarks>
            The
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event target</see>
            of the event is the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>
            object on which <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">DispatchEvent</see>
            is called.
            </remarks>
            <param name="evt">
            The event to be dispatched.
            </param>
            <returns>
            Indicates whether any of the listeners which handled the event
            called
            <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">IEvent.PreventDefault</see>.
            If <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">IEvent.PreventDefault</see>
            was called the returned value is <c>false</c>, else it is
            <c>true</c>.
            </returns>
            <exception cref="T:SharpVectors.Dom.Events.EventException">
            <para>
            UNSPECIFIED_EVENT_TYPE_ERR: Raised if the Event.type was not
            specified by initializing the event before dispatchEvent was
            called. Specification of the Event.type as null or an empty
            string will also trigger this exception.
            </para>
            <para>
            DISPATCH_REQUEST_ERR: Raised if the Event object is already being
            dispatched in the tree.
            </para>
            <para>
            NOT_SUPPORTED_ERR: Raised if the Event object has not been
            created using DocumentEvent.createEvent or does not support the
            interface CustomEvent.
            </para>
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean,System.Object)">
            <summary>
            This method allows the registration of an event listener in a
            specified group or the default group and, depending on the
            <c>useCapture</c> parameter, on the capture phase of the DOM
            event flow or its target and bubbling phases.
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event for which the user is registering.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            associated with the event for which the user is registering.
            </param>
            <param name="listener">
            The <c>listener</c> parameter takes an object implemented by
            the user which implements the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> interface and
            contains the method to be called when the event occurs.
            </param>
            <param name="useCapture">
            If <c>true</c>, <c>useCapture</c> indicates that the user wishes
            to add the event listener for the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">capture phase only</see>,
            i.e. this event listener will not be triggered during the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-phase">target</see>
            and
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-bubbling-phase">bubbling phases</see>.
            If <c>false</c>, the event listener will only be triggered
            during the target and bubbling phases.
            </param>
            <param name="evtGroup">
            The object that represents the event group to associate with the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>. Use <c>null</c> to
            attach the event listener to the default group.
            </param>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-propagation-and-groups">
            Event propagation and event groups
            </seealso>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">
            <summary>
            This method allows the removal of event listeners from a specified
            group or the default group.
            </summary>
            <remarks>
            Calling
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListenerNs</see> with
            arguments which do not identify any currently registered
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> on the EventTarget
            has no effect.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event for which the user registered the event
            listener.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> associated
            with the event for which the user registered the event listener.
            </param>
            <param name="listener">
            The <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> parameter
            indicates the <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> to
            be removed.
            </param>
            <param name="useCapture">
            Specifies whether the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> being removed was
            registered for the capture phase or not. If a listener was
            registered twice, once for the capture phase and once for the
            target and bubbling phases, each must be removed separately.
            Removal of an event listener registered for the capture phase
            does not affect the same event listener registered for the target
            and bubbling phases, and vice versa.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(System.String,System.String)">
            <summary>
            This method allows the DOM application to know if an event
            listener, attached to this
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> or one of its
            ancestors, will be triggered by the specified event type during
            the dispatch of the event to this event target or one of its
            descendants.
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            associated with the event.
            </param>
            <returns>
            <c>true</c> if an event listener will be triggered on the
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> with the specified
            event type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(System.String,System.String)">
            <summary>
            This method allows the DOM application to know if this
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> contains an event
            listener registered for the specified event type.
            </summary>
            <remarks>
            This is useful for determining at which nodes within a hierarchy
            altered handling of specific event types has been introduced, but
            should not be used to determine whether the specified event type
            triggers an event listener.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            associated with the event.
            </param>
            <returns>
            <c>true</c> if an event listener is registered on this
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> for the specified
            event type, <c>false</c> otherwise.
            </returns>
            <seealso cref="M:SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(System.String,System.String)">WillTriggerNs</seealso>
        </member>
        <member name="T:SharpVectors.Dom.Events.IKeyboardEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> interface provides
            specific contextual information associated with keyboard devices.
            </summary>
            <remarks>
            <para>
            Each keyboard event reference a key using an identifier.
            </para>
            <para>
            Each modifier attribute
            (<see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">CtrlKey</see>,
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">ShiftKey</see>,
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">AltKey</see>,
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">MetaKey</see>,
            and <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">AltGraphKey</see>) is activated when the
            key modifier is being pressed down or maintained pressed, i.e. the
            modifier attribute is not in use when the key modifier is being
            released.
            </para>
            <para>
            Note: To create an instance of the
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> interface, use the
            feature string <c>"KeyboardEvent"</c> as the value of the input
            parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyIdentifier">
            <summary>
            Holds the identifier of the key.
            </summary>
            <remarks>
            <para>
            For a list of possible values, refer to
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/keyset.html#KeySet">Key identifiers for keyboard events</see>.
            </para>
            <para>
            Note: Implementations that are unable to identify a key must use the key identifier "Unidentified".
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyLocation">
            <summary>
            Contains an indication of the location of they key on the device.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">
            <summary>
            <c>true</c> if the control (Ctrl) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">
            <summary>
            <c>true</c> if the shift (Shift) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">
            <summary>
            <c>true</c> if the alt (alternative) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">
            <summary>
            <c>true</c> if the meta (Meta) key modifier is activated.
            </summary>
            <remarks>
            Note: The Command key modifier on Macintosh system must be
            represented using this key modifier.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">
            <summary>
            true if the alt-graph (Alt Gr) key modifier is activated. 
            </summary>
            <remarks>
            Note: Some operating systems simulate the alt-graph key modifier
            with the combinaison of alt and ctrl key modifiers.
            Implementations are encouraged to use this modifier instead.
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">InitKeyboardEvent</see> method
            is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times before being
            dispatched if necessary. If called multiple times, the final
            invocation takes precedence. This method has no effect if called
            after the event has been dispatched.
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>.
            </param>
            <param name="keyIdentifierArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyIdentifier">KeyIdentifier</see> attribute.
            </param>
            <param name="keyLocationArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyLocation">KeyLocation</see> attribute.
            </param>
            <param name="ctrlKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">CtrlKey</see> attribute.
            </param>
            <param name="shiftKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">ShiftKey</see> attribute.
            </param>
            <param name="altKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">AltKey</see> attribute.
            </param>
            <param name="metaKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">MetaKey</see> attribute.
            </param>
            <param name="altGraphKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">AltGraphKey</see> attribute.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">InitKeyboardEventNs</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence. This method has no effect if called after the
            event has been dispatched.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or null if the applications wish to
            have no namespace.
            </param>
            <param name="type">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>.
            </param>
            <param name="keyIdentifierArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyIdentifier">KeyIdentifier</see> attribute.
            </param>
            <param name="keyLocationArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyLocation">KeyLocation</see> attribute.
            </param>
            <param name="ctrlKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">CtrlKey</see> attribute.
            </param>
            <param name="shiftKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">ShiftKey</see> attribute.
            </param>
            <param name="altKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">AltKey</see> attribute.
            </param>
            <param name="metaKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">MetaKey</see> attribute.
            </param>
            <param name="altGraphKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">AltGraphKey</see> attribute.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IMouseEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> interface provides
            specific contextual information associated with Mouse events.
            </summary>
            <remarks>
            <para>
            In the case of nested elements mouse events are always targeted at
            the most deeply nested element. Ancestors of the targeted element
            may use bubbling to obtain notification of mouse events which
            occur within its descendent elements.
            </para>
            <para>
            Note: To create an instance of the MouseEvent interface, use the
            feature string "MouseEvent" as the value of the input parameter
            used with the DocumentEvent.createEvent method.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ScreenX">
            <summary>
            The horizontal coordinate at which the event occurred relative
            to the origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ScreenY">
            <summary>
            The vertical coordinate at which the event occurred relative to
            the origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ClientX">
            <summary>
            The horizontal coordinate at which the event occurred relative
            to the DOM implementation's client area.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ClientY">
            <summary>
            The vertical coordinate at which the event occurred relative to
            the DOM implementation's client area.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.CtrlKey">
            <summary>
            <c>true</c> if the control (Ctrl) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ShiftKey">
            <summary>
            <c>true</c> if the shift (Shift) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.AltKey">
            <summary>
            <c>true</c> if the alt (alternative) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.MetaKey">
            <summary>
            <c>true</c> if the meta (Meta) key modifier is activated. 
            </summary>
            <remarks>
            Note: The Command key modifier on Macintosh system must be represented using this key modifier.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.Button">
            <summary>
            During mouse events caused by the depression or release of a mouse
            button, button is used to indicate which mouse button changed
            state.
            </summary>
            <remarks>
            <c>0</c> indicates the normal (in general on the left or
            the one button on Macintosh mice, used to activate a button or
            select text) button of the mouse. <c>2</c> indicates the contextual
            property (in general on the right, used to display a context menu)
            button of the mouse if present. <c>1</c> indicates the extra (in
            general in the middle and often combined with the mouse wheel)
            button. Some mice may provide or simulate more buttons and values
            higher than <c>2</c> could be used to represent such buttons.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.RelatedTarget">
            <summary>
            Used to identify a secondary EventTarget related to a UI event.
            </summary>
            <remarks>
            Currently this attribute is used with the mouseover event to
            indicate the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> which
            the pointing device exited and with the mouseout event to
            indicate the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> which
            the pointing device entered.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.AltGraphKey">
            <summary>
            <c>true</c> if the alt-graph (Alt Gr) key modifier is activated.
            </summary>
            <remarks>
            Note: Some operating systems simulate the alt-graph key modifier
            with the combinaison of alt and ctrl key modifiers.
            Implementations are encouraged to use this modifier instead.
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget)">InitMouseEvent</see> method is used
            to initialize the value of a MouseEvent created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times before being
            dispatched. If called multiple times, the final invocation
            takes precedence. 
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s view.
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse click count.
            </param>
            <param name="screenXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen x
            coordinate.
            </param>
            <param name="screenYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen y
            coordinate.
            </param>
            <param name="clientXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client x
            coordinate.
            </param>
            <param name="clientYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client y
            coordinate.
            </param>
            <param name="ctrlKeyArg">
            Specifies whether or not control key was depressed during
            the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="altKeyArg">
            Specifies whether or not alt key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="shiftKeyArg">
            Specifies whether or not shift key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="metaKeyArg">
            Specifies whether or not meta key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="buttonArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse button.
            </param>
            <param name="relatedTargetArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget,System.Boolean)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget,System.Boolean)">InitMouseEventNs</see> method
            is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            interface.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or null if the application wish to
            have no namespace.
            </param>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s AbstractView.
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse click count.
            </param>
            <param name="screenXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen x
            coordinate.
            </param>
            <param name="screenYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen y
            coordinate.
            </param>
            <param name="clientXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client x
            coordinate.
            </param>
            <param name="clientYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client y
            coordinate.
            </param>
            <param name="ctrlKeyArg">
            Specifies whether or not control key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="altKeyArg">
            Specifies whether or not alt key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="shiftKeyArg">
            Specifies whether or not shift key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="metaKeyArg">
            Specifies whether or not meta key was depressed during the Event.
            </param>
            <param name="buttonArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse button.
            </param>
            <param name="relatedTargetArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>.
            </param>
            <param name="altGraphKeyArg">
            Specifies whether or not alt graph key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IMutationEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> interface provides specific contextual 
            information associated with Mutation events.
            </summary>
            <remarks>
            Note: To create an instance of the <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> interface, use the
            feature string <c>"MutationEvent"</c> as the value of the input parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see> method.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see> is used to identify a secondary node related to a 
            mutation event.
            </summary>
            <remarks>
            For example, if a mutation event is dispatched to a node indicating that its parent
            has changed, the <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see> is the changed parent. If an event 
            is instead dispatched to a subtree indicating a node was changed within it, the 
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see> is the changed node. In the case of the
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see> event it indicates the 
            attribute node which was modified, added, or removed.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">PrevValue</see> indicates the previous value
            of the attribute node in
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see>
            events, and of the <see cref="T:SharpVectors.Dom.ICharacterData">ICharacterData</see>
            node in DOMCharacterDataModified events.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">NewValue</see> indicates the new value of the
            attribute node in DOMAttrModified events, and
            of the <see cref="T:SharpVectors.Dom.ICharacterData">ICharacterData</see> node in
            DOMCharacterDataModified events.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">AttrName</see> indicates the name of the
            changed attribute node in a
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see>
            event.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.AttrChange">
            <summary>
            <c>attrChange</c> indicates the type of change which triggered
            the DOMAttrModified event. The values can be
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see>,
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Addition">AttrChangeType.Addition</see>,
            or
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Removal">AttrChangeType.Removal</see>.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">InitMutationEvent</see> method
            is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times before being
            dispatched if necessary. If called multiple times, the final
            invocation takes precedence.
            </summary>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">PrevValue</see> attribute. This value may
            be <c>null</c>.
            </param>
            <param name="newValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">NewValue</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrNameArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">AttrName</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrChangeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrChange">AttrChange</see> attribute.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">InitMutationEventNs</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or null if the application wish to
            have no namespace.
            </param>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">PrevValue</see> attribute. This value may
            be <c>null</c>.
            </param>
            <param name="newValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">NewValue</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrNameArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">AttrName</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrChangeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrChange">AttrChange</see> attribute.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IMutationNameEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> interface
            provides specific contextual information associated with Mutation
            name event types.
            </summary>
            <remarks>
            Note: To create an instance of the
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> interface,
            use the feature string <c>"MutationNameEvent"</c> as the value of the
            input parameter used with the
            <see cref="!:CreateEvent">CreateEvent</see> method of the
            <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationNameEvent.PrevNamespaceUri">
            <summary>
            The previous value of the
            <see cref="!:RelatedNode">RelatedNode</see>'s namespace URI.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationNameEvent.PrevNodeName">
            <summary>
            The previous value of the
            <see cref="!:RelatedNode">RelatedNode</see>'s nodeName.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">InitMutationNameEvent</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> created
            using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence.
            </summary>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevNamespaceUri">
            Specifies the previous <see cref="!:NamespaceUri">NamespaceUri</see>
            of the related <see cref="T:SharpVectors.Dom.INode">INode</see>. This value may be
            <c>null</c>.
            </param>
            <param name="prevNodeName">
            Specifies the previous <see cref="!:NodeName">NodeName</see> of the
            related Node.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">
            <summary>
            The
            <see cref="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">InitMutationNameEventNs</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> created
            using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence. 
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="!:http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if the application
            wish to have no namespace.
            </param>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevNamespaceUri">
            Specifies the previous
            <see cref="!:INode.NamespaceUri">NamespaceUri</see> of the related
            Node. This value may be <c>null</c>.
            </param>
            <param name="prevNodeName">
            Specifies the previous <see cref="!:INode.NodeName">NodeName</see>
            of the related Node.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.ITextEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> interface provides
            specific contextual information associated with Text Events.
            </summary>
            <remarks>
            Note: To create an instance of the
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> interface, use the
            feature string <c>"TextEvent"</c> as the value of the input parameter
            used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.ITextEvent.Data">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.ITextEvent.Data">Data</see> holds the value of the characters
            generated by the character device. This may be a single
            Unicode character or it may be a string.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.ITextEvent.InitTextEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.ITextEvent.InitTextEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">InitTextEvent</see> method is used
            to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence. This method has no effect if called after the event
            has been dispatched.
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">TextEvent</see>'s view.
            </param>
            <param name="dataArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">TextEvent</see>'s data
            attribute.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.ITextEvent.InitTextEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.ITextEvent.InitTextEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">InitTextEventNs</see> method is
            used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence. This method has no effect if called after the event
            has been dispatched. 
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if the applications
            wish to have no namespace.
            </param>
            <param name="type">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see>'s view.
            </param>
            <param name="dataArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see>'s data
            attribute
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IUiEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> interface provides specific
            contextual information associated with User Interface events.
            </summary>
            <remarks>
            Note: To create an instance of the <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see>
            interface, use the feature string <c>"UIEvent"</c> as the value of the
            input parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IUiEvent.View">
            <summary>
            The <see cref="P:SharpVectors.Dom.Events.IUiEvent.View">View</see> attribute identifies the
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see> from which the
            event was generated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IUiEvent.Detail">
            <summary>
            Specifies some detail information about the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>, depending on the type of event.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IUiEvent.InitUiEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">InitUiEvent</see> method is used to
            initialize the value of a <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see>
            created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">InitUiEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence.
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>.
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s detail.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IUiEvent.InitUiEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">InitUiEventNs</see> method is used
            to initialize the value of a <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see>
            created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> has been dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence. 
            </summary>
            <param name="namespaceURI">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if the application wish
            not to use namespaces.
            </param>
            <param name="typeArg">
            Specifies the event type (see also the description of the
            <c>type</c> attribute in the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>
            interface).
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">Event</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s detail.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.KeyLocationCode">
            <remarks>
            Note: In case a DOM implementation wishes to provide new location
            information, all values above the value of this constant can be
            used for that effect and generic DOM applications should consider
            values above the value of this constant as being equivalent to
            <see cref="F:SharpVectors.Dom.Events.KeyLocationCode.Unknown">Unknown</see>.
            </remarks>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Standard">
            <summary>
            The key activation is not distinguished as the left or right
            version of the key, and did not originate from the numeric
            keypad (or did not originate with a virtual key corresponding to
            the numeric keypad). Example: the 'Q' key on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Left">
            <summary>
            The key activated is in the left key location (there is more than
            one possible location for this key). Example: the left Shift key
            on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Right">
            <summary>
            The key activation is in the right key location (there is more
            than one possible location for this key). Example: the right
            Shift key on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Numpad">
            <summary>
            The key activation originated on the numeric keypad or with a
            virtual key corresponding to the numeric keypad. Example: the
            '1' key on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Unknown">
            <summary>
            Implementations can use this constant to indicate that the
            location of the key cannot be determined.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IElementVisitor">
            <summary>
            Visitor that visits all renderable elements
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.CssPrimitiveType">
            <summary>
            The CssPrimativeType Enum Class contains the list of possible primitive 
            value types in CSS.  This class is an extension of the CSS spec. The CSS 
            spec has a list of constants instead of an enum class.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Unknown">
            <summary>
            The value is not a recognized CSS2 value. The value can only be obtained by using the cssText attribute.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Number">
            <summary>
            The value is a simple number. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Percentage">
            <summary>
            The value is a percentage. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Ems">
            <summary>
            The value is a length (ems). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Exs">
            <summary>
            The value is a length (exs). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Px">
            <summary>
            The value is a length (px). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Cm">
            <summary>
            The value is a length (cm). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Mm">
            <summary>
            The value is a length (mm). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.In">
            <summary>
            The value is a length (in). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Pt">
            <summary>
            The value is a length (pt). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Pc">
            <summary>
            The value is a length (pc). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Deg">
            <summary>
            The value is an angle (deg). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Rad">
            <summary>
            The value is an angle (rad). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Grad">
            <summary>
            The value is an angle (grad). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Ms">
            <summary>
            The value is a time (ms). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.S">
            <summary>
            The value is a time (s). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Hz">
            <summary>
            The value is a frequency (Hz). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.KHz">
            <summary>
            The value is a frequency (kHz). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Dimension">
            <summary>
            The value is a number with an unknown dimension. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.String">
            <summary>
            The value is a STRING. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Uri">
            <summary>
            The value is a URI. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Ident">
            <summary>
            The value is an identifier. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Attr">
            <summary>
            The value is a attribute function. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Counter">
            <summary>
            The value is a counter or counters function. The value can be obtained by using the getCounterValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Rect">
            <summary>
            The value is a rect function. The value can be obtained by using the getRectValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.RgbColor">
            <summary>
            The value is a RGB color. The value can be obtained by using the getRGBColorValue method.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.CssRuleType">
            <summary>
                The CssRuleType Enum Class contains the possible Rule Type
                Values.  This is an extension of the CSS spec.  The spec
                contains only a list of contstant in the CssRule Interface. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.UnknownRule">
            <summary>
            The rule is a CSSUnknownRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.StyleRule">
            <summary>
            The rule is a CSSStyleRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.CharsetRule">
            <summary>
            The rule is a CSSCharsetRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.ImportRule">
            <summary>
            The rule is a CSSImportRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.MediaRule">
            <summary>
            The rule is a CSSMediaRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.FontFaceRule">
            <summary>
            The rule is a CSSFontFaceRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.PageRule">
            <summary>
            The rule is a CSSPageRule.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.CssValueType">
            <summary>
            The CssValueType Enum Class contains the possible Css Value
            Types.  This is an extension to the CSS spec.  The spec has
            a list of constants defined within the ICssValue Interface 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.Inherit">
            <summary>
            The value is inherited and the cssText contains "inherit".
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.PrimitiveValue">
            <summary>
            The value is a primitive value and an instance of the 
            CSSPrimitiveValue interface can be obtained by using 
            binding-specific casting methods on this instance of 
            the CSSValue interface.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.ValueList">
            <summary>
            The value is a CSSValue list and an instance of the 
            CSSValueList interface can be obtained by using 
            binding-specific casting methods on this instance 
            of the CSSValue interface.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.Custom">
            <summary>
            The value is a custom value.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssCounter">
            <summary>
            The Counter interface is used to represent any counter or 
            counters function value. This interface reflects the values 
            in the underlying style property.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCounter.Separator">
            <summary>
            This attribute is used for the separator of the nested counters.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCounter.ListStyle">
            <summary>
            This attribute is used for the style of the list.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCounter.Identifier">
            <summary>
            This attribute is used for the identifier of the counter.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssCharsetRule">
            <summary>
            The CSSCharsetRule interface represents a @charset rule in a CSS style sheet. The value of the 
            encoding attribute does not affect the encoding of text data in the DOM objects; this encoding is 
            always UTF-16. After a stylesheet is loaded, the value of the encoding attribute is the value found in the 
            @charset rule. If there was no @charset in the original document, then no CSSCharsetRule is created. 
            The value of the encoding attribute may also be used as a hint for the 
            encoding used on serialization of the style sheet. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCharsetRule.Encoding">
            <summary>
            The encoding information used in this @charset rule.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">
            SYNTAX_ERR: Raised if the specified encoding value has a syntax error and is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            NO_MODIFICATION_ALLOWED_ERR: Raised if this encoding rule is readonly.
            </exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssFontFaceRule">
            <summary>
            The CSSFontFaceRule interface represents a @font-face rule in a CSS style sheet. 
            The @font-face rule is used to hold a set of font descriptions. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssFontFaceRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssImportRule">
            <summary>
            The CSSImportRule interface represents a @import rule within a CSS style sheet. 
            The @import rule is used to import style rules from other style sheets. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssImportRule.StyleSheet">
            <summary>
            The style sheet referred to by this rule, if it has been loaded. The value of this attribute 
            is null if the style sheet has not yet been loaded or if it will not be loaded (e.g. if the 
            style sheet is for a media type not supported by the user agent).
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssImportRule.Media">
            <summary>
            A list of media types for which this style sheet may be used.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssImportRule.Href">
            <summary>
            The location of the style sheet to be imported. The attribute will not contain the 
            "url(...)" specifier around the URI.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssMediaRule">
            <summary>
            The CSSMediaRule interface represents a @media rule in a CSS style sheet. 
            A @media rule can be used to delimit style rules for specific media types
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssMediaRule.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the media block.
            </summary>
            <param name="index">The index within the media block's rule collection of the rule to remove.</param>
            <exception cref="T:SharpVectors.Dom.DomException">
            INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the media rule list.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is readonly
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssMediaRule.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the media block.
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both 
            the selector and the style declaration. For at-rules, this specifies both the at-identifier 
            and the rule content.
            </param>
            <param name="index">The index within the media block's rule collection of the rule before which 
            to insert the specified rule. If the specified index is equal to the length of the media blocks's 
            rule collection, the rule will be added to the end of the media block.
            </param>
            <returns>The index within the media block's rule collection of the newly inserted rule</returns>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssMediaRule.CssRules">
            <summary>
            A list of all CSS rules contained within the media block.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssMediaRule.Media">
            <summary>
            A list of media types for this rule
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssPageRule">
            <summary>
            The CSSPageRule interface represents a @page rule within a CSS style sheet. 
            The @page rule is used to specify the dimensions, orientation, margins, etc. of a page box for paged media. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssPageRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssPageRule.SelectorText">
            <summary>
            The parsable textual representation of the page selector for the rule.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">
            SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly.</exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssPrimitiveValue">
            <summary>
            The CSSPrimitiveValue interface represents a single CSS value. 
            This interface may be used to determine the value of a specific
            style property currently set in a block or to set a specific 
            style property explicitly within the block. An instance of this 
            interface might be obtained from the getPropertyCSSValue method
            of the CSSStyleDeclaration interface. A CSSPrimitiveValue object
            only occurs in a context of a CSS property. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssPrimitiveValue.PrimitiveType">
            <summary>
            The type of the value as defined by the constants specified above.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.SetFloatValue(SharpVectors.Dom.Css.CssPrimitiveType,System.Double)">
            <summary>
            A method to set the float value with a specified unit. If the property attached with this value can not accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised
            </summary>
            <param name="unitType">A unit code as defined above. The unit code can only be a float unit type (i.e. CSS_NUMBER, CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, CSS_HZ, CSS_KHZ, CSS_DIMENSION).</param>
            <param name="floatValue">The new float value.</param>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the attached property doesn't support the float value or the unit type.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetFloatValue(SharpVectors.Dom.Css.CssPrimitiveType)">
            <summary>
            This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a DOMException is raised.
            </summary>
            <param name="unitType">A unit code to get the float value. The unit code can only be a float unit type (i.e. CSS_NUMBER, CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, CSS_HZ, CSS_KHZ, CSS_DIMENSION).</param>
            <returns>The float value in the specified unit.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a float value or if the float value can't be converted into the specified unit.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.SetStringValue(SharpVectors.Dom.Css.CssPrimitiveType,System.String)">
            <summary>
            A method to set the string value with the specified unit. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised.
            </summary>
            <param name="stringType">A string code as defined above. The string code can only be a string unit type (i.e. CSS_STRING, CSS_URI, CSS_IDENT, and CSS_ATTR).</param>
            <param name="stringValue">The new string value.</param>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value or if the string value can't be converted into the specified unit.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetStringValue">
            <summary>
            This method is used to get the string value. If the CSS value doesn't contain a string value, a DOMException is raised.
            Note: Some properties (like 'font-family' or 'voice-family') convert a whitespace separated list of idents to a string.
            </summary>
            <returns>The string value in the current unit. The current primitiveType can only be a string unit type (i.e. CSS_STRING, CSS_URI, CSS_IDENT and CSS_ATTR).</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetCounterValue">
            <summary>
            This method is used to get the Counter value. If this CSS value doesn't contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface
            </summary>
            <returns>The Counter value</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Counter value (e.g. this is not CSS_COUNTER).</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetRectValue">
            <summary>
            This method is used to get the Rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface.
            </summary>
            <returns>The Rect value</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Rect value. (e.g. this is not CSS_RECT).</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetRgbColorValue">
            <summary>
            This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface.
            </summary>
            <returns>the RGB color value.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_ACCESS_ERR: Raised if the attached property can't return a RGB color value (e.g. this is not CSS_RGBCOLOR).</exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssRule">
            <summary>
            The CSSRule interface is the abstract base interface for any
            type of CSS statement. This includes both rule sets and 
            at-rules. An implementation is expected to preserve all rules 
            specified in a CSS style sheet, even if the rule is not recognized 
            by the parser. Unrecognized rules are represented using the 
            CSSUnknownRule interface. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.ParentStyleSheet">
            <summary>
            The type of the rule, as defined above. The expectation is that binding-specific casting methods can be used to cast down from an instance of the CSSRule interface to the specific derived interface implied by the type.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.ParentRule">
            <summary>
            The style sheet that contains this rule.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.Type">
            <summary>
            If this rule is contained inside another rule (e.g. a style rule inside an @media block), this is the containing rule. If this rule is not nested inside any other rules, this returns null
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.CssText">
            <summary>
            The parsable textual representation of the rule. This reflects the current state of the rule and not its initial value
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_MODIFICATION_ERR: Raised if the specified CSS string value represents a different type of rule than the current one.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at this point in the style sheet.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if the rule is readonly.</exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssRuleList">
            <summary>
            The CSSRuleList interface provides the abstraction of an 
            ordered collection of CSS rules. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRuleList.Length">
            <summary>
            The number of CSSRules in the list. The range of valid child rule indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRuleList.Item(System.UInt64)">
            <summary>
            Used to retrieve a CSS rule by ordinal index. The order in this collection represents the 
            order of the rules in the CSS style sheet. If index is greater than or equal to the number 
            of rules in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssStyleDeclaration">
            <summary>
            The CSSStyleDeclaration interface represents a single CSS 
            declaration block. This interface may be used to determine 
            the style properties currently set in a block or to set 
            style properties explicitly within the block. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.SetProperty(System.String,System.String,System.String)">
            <summary>
            Used to set a property value and priority within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <param name="value">The new value of the property.</param>
            <param name="priority">The new priority of the property (e.g. "important").</param>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyPriority(System.String)">
            <summary>
            Used to retrieve the priority of a CSS property (e.g. the "important" qualifier) if the property has been explicitly set in this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>A string representing the priority (e.g. "important") if one exists. The empty string if none exists.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.RemoveProperty(System.String)">
            <summary>
            Used to remove a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyCssValue(System.String)">
            <summary>
            Used to retrieve the object representation of the value of a CSS property if it has been explicitly set within this declaration block. This method returns null if the property is a shorthand property. Shorthand property values can only be accessed and modified as strings, using the getPropertyValue and setProperty methods.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns null if the property has not been set.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyValue(System.String)">
            <summary>
            Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set.</returns>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.ParentRule">
            <summary>
            The CSS rule that contains this declaration block or null if this CSSStyleDeclaration is not attached to a CSSRule.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.Length">
            <summary>
            The number of properties that have been explicitly set in this declaration block. The range of valid indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.CssText">
            <summary>
            The parsable textual representation of the declaration block (excluding the surrounding curly braces). Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or a property is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.Item(System.UInt64)">
            <summary>
            Used to retrieve the properties that have been explicitly set in this declaration block. The order of the properties retrieved using this method does not have to be the order in which they were set. This method can be used to iterate over all properties in this declaration block.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssStyleRule">
            <summary>
            The CSSStyleRule interface represents a single rule set 
            in a CSS style sheet. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleRule.SelectorText">
            <summary>
            The textual representation of the selector for the rule set. The implementation may have stripped out insignificant whitespace while parsing the selector.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this rule is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleRule.Style">
            <summary>
            The declaration-block of this rule set.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssStyleSheet">
            <summary>
            The CSSStyleSheet interface is a concrete interface used to 
            represent a CSS style sheet i.e., a style sheet whose 
            content type is "text/css". 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleSheet.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the style sheet.
            </summary>
            <param name="index">The index within the style sheet's rule list of the rule to remove.</param>
            <exception cref="T:SharpVectors.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the style sheet's rule list.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleSheet.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</param>
            <param name="index">The index within the style sheet's rule list of the rule before which to insert the specified rule. If the specified index is equal to the length of the style sheet's rule collection, the rule will be added to the end of the style sheet.</param>
            <returns>The index within the style sheet's rule collection of the newly inserted rule.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the specified index e.g. if an @import rule is inserted after a standard rule set or other at-rule.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">INDEX_SIZE_ERR: Raised if the specified index does not correspond to a rule in the style sheet's rule list.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified rule has a syntax error and is unparsable.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleSheet.CssRules">
            <summary>
            The list of all CSS rules contained within the style sheet. This includes both rule sets and at-rules.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleSheet.OwnerRule">
            <summary>
            If this style sheet comes from an @import rule, the ownerRule attribute will contain the CSSImportRule. In that case, the ownerNode attribute in the StyleSheet interface will be null. If the style sheet comes from an element or a processing instruction, the ownerRule attribute will be null and the ownerNode attribute will contain the Node.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssUnknownRule">
            <summary>
            The CSSUnknownRule interface represents an at-rule not supported by this user agent. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssValue">
            <summary>
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValue.CssText">
            <summary>
            A string representation of the current value.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified CSS string value has a syntax error (according to the attached property) or is unparsable</exception>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_MODIFICATION_ERR: Raised if the specified CSS string value represents a different type of values than the values allowed by the CSS property.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this value is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValue.CssValueType">
            <summary>
            A code defining the type of the value as defined above
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssValueList">
            <summary>
            The CSSValueList interface provides the abstraction of an ordered collection of CSS values.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValueList.Length">
            <summary>
            The number of CSSValues in the list. The range of valid values of the indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValueList.Item(System.UInt64)">
            <summary>
            Used to retrieve a CSSValue by ordinal index. The order in this collection represents the 
            order of the values in the CSS style property. If index is greater than or equal to the number 
            of values in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.IDocumentCss">
            <summary>
            This interface represents a document with a CSS view.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.IDocumentCss.GetOverrideStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to retrieve the override style declaration for a specified element 
            and a specified pseudo-element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.IDomImplementationCss">
            <summary>
            This interface allows the DOM user to create a CSSStyleSheet outside the context of a document. 
            There is no way to associate the new CSSStyleSheet with a document in DOM Level 2. 
            </summary>
            <remarks>
            This interface should inherit from IDomImplementation but System.Xml does not have 
            this interface, just a class. You can not inherit from a class in an interface.
            </remarks>	
        </member>
        <member name="M:SharpVectors.Dom.Css.IDomImplementationCss.CreateCssStyleSheet(System.String,System.String)">
            <summary>
            Creates a new CSSStyleSheet.
            </summary>
            <param name="title">The advisory title. See also the Style Sheet Interfaces section.</param>
            <param name="media">The comma-separated list of media associated with the new style sheet. 
            See also the Style Sheet Interfaces section.</param>
            <returns>A new CSS style sheet.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Css.IElementCssInlineStyle">
            <summary>
            Inline style information attached to elements is exposed through the style attribute. 
            </summary>
            <remarks>
            This represents the contents of the STYLE attribute for HTML elements (or elements in other 
            schemas or DTDs which use the STYLE attribute in the same way). The expectation is that an 
            instance of the ElementCSSInlineStyle interface can be obtained by using binding-specific casting 
            methods on an instance of the Element interface when the element supports inline CSS style informations. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Css.IElementCssInlineStyle.Style">
            <summary>
            The style attribute
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssRect">
            <summary>
            The Rect interface is used to represent any rect value. This
            interface reflects the values in the underlying style 
            property. Hence, modifications made to the CSSPrimitiveValue
            objects modify the style property. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Left">
            <summary>
            This attribute is used for the left of the rect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Bottom">
            <summary>
            This attribute is used for the bottom of the rect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Right">
            <summary>
            This attribute is used for the right of the rect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Top">
            <summary>
            This attribute is used for the top of the rect.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssColor">
            <summary>
            The RGBColor interface is used to represent any RGB color value. This interface reflects the 
            values in the underlying style property. Hence, modifications made to the 
            CSSPrimitiveValue objects modify the style property. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Name">
            <summary>
            Gets the name of the color, if available.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Alpha">
            <summary>
            This attribute is used for the alpha value of the RGBA color
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Red">
            <summary>
            This attribute is used for the red value of the RGB color
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Green">
            <summary>
            This attribute is used for the green value of the RGB color.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Blue">
            <summary>
            This attribute is used for the blue value of the RGB color
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.HasAlpha">
            <summary>
            Gets a value which indicates whether the color value has alpha value or not.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.IsSystemColor">
            <summary>
            Gets a value which indicates whether the color is system-defined color.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssView">
            <summary>
            This interface represents a CSS view. The getComputedStyle method provides a read only access 
            to the computed values of an element. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssView.GetComputedStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to get the computed style as it is defined in [CSS2].
            </summary>
            <param name="elt">The element whose style is to be computed. This parameter cannot be null.</param>
            <param name="pseudoElt">The pseudo-element or null if none</param>
        </member>
        <member name="T:SharpVectors.Dom.IAttribute">
            <summary>
            Summary description for IAttribute.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.ICDataSection">
            <summary>
            Summary description for ICDataSection.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.ICharacterData">
            <summary>
            Summary description for ICharacterData.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IComment">
            <summary>
            Summary description for IComment.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDocumentFragment">
            <summary>
            Summary description for IDocumentFragment.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDocumentType">
            <summary>
            Summary description for IDocumentType.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDomConfiguration">
            <summary>
            Summary description for IDomConfiguration.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDomImplementation">
            <summary>
            Summary description for IDomImplementation.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IElement">
            <summary>
            Summary description for IElement.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IEntityReference">
            <summary>
            Summary description for IEntityReference.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.INode">
            <summary>
            Summary description for INode.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.INodeList">
            <summary>
            Summary description for INodeList.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IProcessingInstruction">
            <summary>
            Summary description for IProcessingInstruction.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IText">
            <summary>
            Summary description for IText.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IDocumentStyle">
            <summary>
            The DocumentStyle interface provides a mechanism by which the style sheets embedded in a document 
            can be retrieved. 
            The expectation is that an instance of the DocumentStyle interface can be obtained by using 
            binding-specific casting methods on an instance of the Document interface. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IDocumentStyle.StyleSheets">
            <summary>
            A list containing all the style sheets explicitly linked into or embedded in a document. 
            For HTML documents, this includes external style sheets, included via the HTML LINK element, 
            and inline STYLE elements. In XML, this includes external style sheets, included via style 
            sheet processing instructions (see [XML-StyleSheet]).
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.ILinkStyle">
            <summary>
            The LinkStyle interface provides a mechanism by which a style sheet can be retrieved from the 
            node responsible for linking it into a document. An instance of the LinkStyle interface can be 
            obtained using binding-specific casting methods on an instance of a linking node (HTMLLinkElement, 
            HTMLStyleElement or ProcessingInstruction in DOM Level 2). 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.ILinkStyle.Sheet">
            <summary>
            The style sheet
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IMediaList">
            <summary>
            The MediaList interface provides the abstraction of an ordered collection of media, without 
            defining or constraining how this collection is implemented. An empty list is the same
            as a list that contains the medium "all". 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Stylesheets.IMediaList.AppendMedium(System.String)">
            <summary>
            Adds the medium newMedium to the end of the list. If the newMedium is already used, it is first removed.
            </summary>
            <param name="newMedium">The new medium to add.</param>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_CHARACTER_ERR: If the medium contains characters that are invalid in the underlying style language.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly</exception>
        </member>
        <member name="M:SharpVectors.Dom.Stylesheets.IMediaList.DeleteMedium(System.String)">
            <summary>
            
            </summary>
            <param name="oldMedium"></param>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NOT_FOUND_ERR: Raised if oldMedium is not in the list.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IMediaList.Length">
            <summary>
            The number of media in the list. The range of valid media is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IMediaList.MediaText">
            <summary>
            The parsable textual representation of the media list. This is a comma-separated list of media.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">SYNTAX_ERR: Raised if the specified string value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NO_MODIFICATION_ALLOWED_ERR: Raised if this media list is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IMediaList.Item(System.UInt64)">
            <summary>
            Returns the indexth in the list. If index is greater than or equal to the number of media in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IStyleSheet">
            <summary>
            The StyleSheet interface is the abstract base interface for any type of style sheet. It represents a 
            single style sheet associated with a structured document. In HTML, the StyleSheet interface represents 
            either an external style sheet, included via the HTML LINK element, or an inline STYLE element. In XML, 
            this interface represents an external style sheet, included via a style sheet processing 
            instruction. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Media">
            <summary>
            The intended destination media for style information. The media is often specified in the ownerNode. 
            If no media has been specified, the MediaList will be empty. See the media attribute definition for 
            the LINK element in HTML 4.0, and the media pseudo-attribute for the XML style sheet processing 
            instruction . Modifying the media list may cause a change to the attribute disabled.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Title">
            <summary>
            The advisory title. The title is often specified in the ownerNode. See the title attribute definition 
            for the LINK element in HTML 4.0, and the title pseudo-attribute for the XML style sheet processing 
            instruction.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Href">
            <summary>
            If the style sheet is a linked style sheet, the value of its attribute is its location. For inline 
            style sheets, the value of this attribute is null. See the href attribute definition for the LINK 
            element in HTML 4.0, and the href pseudo-attribute for the XML style sheet processing
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.ParentStyleSheet">
            <summary>
            For style sheet languages that support the concept of style sheet inclusion, this attribute represents 
            the including style sheet, if one exists. If the style sheet is a top-level style sheet, or the style 
            sheet language does not support inclusion, the value of this attribute is null.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.OwnerNode">
            <summary>
            The node that associates this style sheet with the document. For HTML, this may be the corresponding 
            LINK or STYLE element. For XML, it may be the linking processing instruction. For style sheets that 
            are included by other style sheets, the value of this attribute is null
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Disabled">
            <summary>
            false if the style sheet is applied to the document. true if it is not. Modifying this attribute 
            may cause a new resolution of style for the document. A stylesheet only applies if both an 
            appropriate medium definition is present and the disabled attribute is false. So, if the media 
            doesn't apply to the current user agent, the disabled attribute is ignored.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Type">
            <summary>
            This specifies the style sheet language for this style sheet. The style sheet language is 
            specified as a content type (e.g. "text/css"). The content type is often specified in the 
            ownerNode. Also see the type attribute definition for the LINK element in HTML 4.0, and the 
            type pseudo-attribute for the XML style sheet processing instruction.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IStyleSheetList">
            <summary>
            The StyleSheetList interface provides the abstraction of an ordered collection of style sheets. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheetList.Length">
            <summary>
            The number of StyleSheets in the list. The range of valid child stylesheet indices is 0 to 
            length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheetList.Item(System.UInt64)">
            <summary>
            Used to retrieve a style sheet by ordinal index. If index is greater than or equal to the 
            number of style sheets in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Views.IAbstractView">
            <summary>
            A base interface that all views shall derive from
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Views.IAbstractView.Document">
            <summary>
            The source DocumentView of which this is an AbstractView.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Views.IDocumentView">
            <summary>
            The DocumentView interface is implemented by Document objects in DOM implementations supporting 
            DOM Views. It provides an attribute to retrieve the default view of a document.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Views.IDocumentView.DefaultView">
            <summary>
            The default AbstractView for this Document, or null if none available
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.XmlConstants">
            <summary>
            Contains common XML constants.
            </summary>
        </member>
        <member name="T:SharpVectors.Net.DataWebResponse">
            <summary>
            Summary description for DataWebResponse.
            </summary>
            <remarks>According to http://www.ietf.org/rfc/rfc2397.txt</remarks>
        </member>
        <member name="T:SharpVectors.Polynomials.Polynomial">
            <summary>
            Summary description for Polynomial.
            </summary>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.#ctor(System.Double[])">
            <summary>
            Polynomial constuctor
            </summary>
            <param name="coefficients"></param>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Interpolate(System.Double[],System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Interpolate - adapted from "Numerical Recipes in C"
            </summary>
            <param name="xs"></param>
            <param name="ys"></param>
            <param name="n"></param>
            <param name="offset"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Evaluate(System.Double)">
            <summary>
            Evaluate
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Simpson(System.Double,System.Double)">
            <summary>
            Simspon - adapted from "Numerical Recipes in C"
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Romberg(System.Double,System.Double)">
            <summary>
            Romberg - adapted from "Numerical Recipes in C"
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Trapezoid(System.Double,System.Double,System.Int32)">
            <summary>
            trapezoid - adapted from "Numerical Recipes in C"
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:SharpVectors.Polynomials.ValueWithError">
            <summary>
            Stucture used to return values with associated error tolerances
            </summary>
        </member>
        <member name="T:SharpVectors.Polynomials.SqrtPolynomial">
            <summary>
            This class overrides Polynomial's evaluate method to return the square root of that value.
            We need to integrate the square root of a polynomial when finding the arc length of a Bezier curve.
            </summary>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlNamespaceManager">
            <summary>
            XML namespace manager allowing to fire events when namespace is not found
            </summary>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlNamespaceManager.ResolveEventHandler">
            <summary>
            Event handler type
            </summary>
        </member>
        <member name="E:SharpVectors.Xml.DynamicXmlNamespaceManager.Resolve">
            <summary>
            Occurs when trying to resolve an unknown namespace.
            </summary>
        </member>
        <member name="M:SharpVectors.Xml.DynamicXmlNamespaceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Xml.DynamicXmlNamespaceManager"/> class.
            </summary>
        </member>
        <member name="M:SharpVectors.Xml.DynamicXmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Xml.DynamicXmlNamespaceManager"/> class.
            </summary>
            <param name="xmlNameTable">The XML name table.</param>
        </member>
        <member name="M:SharpVectors.Xml.DynamicXmlNamespaceManager.LookupNamespace(System.String)">
            <summary>
            Gets the namespace URI for the specified prefix.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass string.Empty.</param>
            <returns>
            Returns the namespace URI for <paramref name="prefix"/> or null if there is no mapped namespace. The returned string is atomized.
            For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable"/>.
            </returns>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlUrlResolver">
            <summary>
            Hook URL solving
            </summary>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlUrlResolver.ResolveEventHandler">
            <summary>
            Event handler type
            </summary>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlUrlResolver.GettingEntityEventHandler">
            <summary>
            Fires when GetEntity is called
            </summary>
        </member>
        <member name="E:SharpVectors.Xml.DynamicXmlUrlResolver.Resolving">
            <summary>
            Occurs when trying to resolve an Uri.
            </summary>
        </member>
        <member name="E:SharpVectors.Xml.DynamicXmlUrlResolver.GettingEntity">
            <summary>
            Occurs when getting entity.
            </summary>
        </member>
        <member name="M:SharpVectors.Xml.DynamicXmlUrlResolver.ResolveUri(System.Uri,System.String)">
            <summary>
            Resolves the absolute URI from the base and relative URIs.
            </summary>
            <param name="baseUri">The base URI used to resolve the relative URI.</param>
            <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri"/> value. If relative, it combines with the <paramref name="baseUri"/> to make an absolute URI.</param>
            <returns>
            A <see cref="T:System.Uri"/> representing the absolute URI, or null if the relative URI cannot be resolved.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="baseUri "/>is null or <paramref name="relativeUri"/> is null</exception>
        </member>
        <member name="T:SharpVectors.Xml.LocalDtdXmlUrlResolver">
            <summary>
            Used to redirect external DTDs to local copies.
            </summary>
        </member>
    </members>
</doc>
